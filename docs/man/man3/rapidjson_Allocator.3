.TH "rapidjson::Allocator" 3 "Thu Nov 3 2016" "Version 0.9" "EXASockets" \" -*- nroff -*-
.ad l
.nh
.SH NAME
rapidjson::Allocator \- Concept for allocating, resizing and freeing memory block\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <allocators\&.h>\fP
.SH "Detailed Description"
.PP 
Concept for allocating, resizing and freeing memory block\&. 

Note that Malloc() and Realloc() are non-static but Free() is static\&.
.PP
So if an allocator need to support Free(), it needs to put its pointer in the header of memory block\&.
.PP
.PP
.nf
concept Allocator {
    static const bool kNeedFree;    

    // Allocate a memory block\&.
    // \param size of the memory block in bytes\&.
    // \returns pointer to the memory block\&.
    void* Malloc(size_t size);

    // Resize a memory block\&.
    // \param originalPtr The pointer to current memory block\&. Null pointer is permitted\&.
    // \param originalSize The current size in bytes\&. (Design issue: since some allocator may not book-keep this, explicitly pass to it can save memory\&.)
    // \param newSize the new size in bytes\&.
    void* Realloc(void* originalPtr, size_t originalSize, size_t newSize);

    // Free a memory block\&.
    // \param pointer to the memory block\&. Null pointer is permitted\&.
    static void Free(void *ptr);
};
.fi
.PP
 

.SH "Author"
.PP 
Generated automatically by Doxygen for EXASockets from the source code\&.
