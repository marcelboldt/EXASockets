.TH "internal::Stack< Allocator >" 3 "Thu Nov 3 2016" "Version 0.9" "EXASockets" \" -*- nroff -*-
.ad l
.nh
.SH NAME
internal::Stack< Allocator > \- A type-unsafe stack for storing different types of data\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <stack\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBStack\fP (Allocator *allocator, size_t stackCapacity)"
.br
.ti -1c
.RI "void \fBSwap\fP (\fBStack\fP &rhs) RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "void \fBClear\fP ()"
.br
.ti -1c
.RI "void \fBShrinkToFit\fP ()"
.br
.ti -1c
.RI "template<typename T > RAPIDJSON_FORCEINLINE void \fBReserve\fP (size_t count=1)"
.br
.ti -1c
.RI "template<typename T > RAPIDJSON_FORCEINLINE T * \fBPush\fP (size_t count=1)"
.br
.ti -1c
.RI "template<typename T > RAPIDJSON_FORCEINLINE T * \fBPushUnsafe\fP (size_t count=1)"
.br
.ti -1c
.RI "template<typename T > T * \fBPop\fP (size_t count)"
.br
.ti -1c
.RI "template<typename T > T * \fBTop\fP ()"
.br
.ti -1c
.RI "template<typename T > const T * \fBTop\fP () const"
.br
.ti -1c
.RI "template<typename T > T * \fBEnd\fP ()"
.br
.ti -1c
.RI "template<typename T > const T * \fBEnd\fP () const"
.br
.ti -1c
.RI "template<typename T > T * \fBBottom\fP ()"
.br
.ti -1c
.RI "template<typename T > const T * \fBBottom\fP () const"
.br
.ti -1c
.RI "bool \fBHasAllocator\fP () const"
.br
.ti -1c
.RI "Allocator & \fBGetAllocator\fP ()"
.br
.ti -1c
.RI "bool \fBEmpty\fP () const"
.br
.ti -1c
.RI "size_t \fBGetSize\fP () const"
.br
.ti -1c
.RI "size_t \fBGetCapacity\fP () const"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Allocator>
.br
class internal::Stack< Allocator >"
A type-unsafe stack for storing different types of data\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIAllocator\fP Allocator for allocating stack memory\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for EXASockets from the source code\&.
