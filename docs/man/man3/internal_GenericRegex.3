.TH "internal::GenericRegex< Encoding, Allocator >" 3 "Thu Nov 3 2016" "Version 0.9" "EXASockets" \" -*- nroff -*-
.ad l
.nh
.SH NAME
internal::GenericRegex< Encoding, Allocator > \- Regular expression engine with subset of ECMAscript grammar\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <regex\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Encoding \fBEncodingType\fP"
.br
.ti -1c
.RI "typedef Encoding::Ch \fBCh\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGenericRegex\fP (const Ch *source, Allocator *allocator=0)"
.br
.ti -1c
.RI "bool \fBIsValid\fP () const"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename , typename > class \fBGenericRegexSearch\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Encoding, typename Allocator = CrtAllocator>
.br
class internal::GenericRegex< Encoding, Allocator >"
Regular expression engine with subset of ECMAscript grammar\&. 

Supported regular expression syntax:
.IP "\(bu" 2
\fCab\fP Concatenation
.IP "\(bu" 2
\fCa|b\fP Alternation
.IP "\(bu" 2
\fCa\fP? Zero or one
.IP "\(bu" 2
\fCa*\fP Zero or more
.IP "\(bu" 2
\fCa+\fP One or more
.IP "\(bu" 2
\fCa{3}\fP Exactly 3 times
.IP "\(bu" 2
\fCa{3\fP,} At least 3 times
.IP "\(bu" 2
\fCa{3\fP,5} 3 to 5 times
.IP "\(bu" 2
\fC\fP(ab) Grouping
.IP "\(bu" 2
\fC^a\fP At the beginning
.IP "\(bu" 2
\fCa$\fP At the end
.IP "\(bu" 2
\fC\fP\&. Any character
.IP "\(bu" 2
\fC\fP[abc] Character classes
.IP "\(bu" 2
\fC\fP[a-c] Character class range
.IP "\(bu" 2
\fC\fP[a-z0-9_] Character class combination
.IP "\(bu" 2
\fC\fP[^abc] Negated character classes
.IP "\(bu" 2
\fC\fP[^a-c] Negated character class range
.IP "\(bu" 2
\fC\fP[\fB\fP] Backspace (U+0008)
.IP "\(bu" 2
\fC\\\fP| \\\\ \&.\&.\&. Escape characters
.IP "\(bu" 2
\fC\\f\fP Form feed (U+000C)
.IP "\(bu" 2
\fC\\n\fP Line feed (U+000A)
.IP "\(bu" 2
\fC\\r\fP Carriage return (U+000D)
.IP "\(bu" 2
\fC\\t\fP Tab (U+0009)
.IP "\(bu" 2
\fC\\v\fP Vertical tab (U+000B)
.PP
.PP
\fBNote:\fP
.RS 4
This is a Thompson NFA engine, implemented with reference to Cox, Russ\&. 'Regular Expression Matching Can Be Simple And Fast (but is slow in Java, Perl, PHP, Python, Ruby,\&.\&.\&.)\&.', https://swtch.com/~rsc/regexp/regexp1.html 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for EXASockets from the source code\&.
