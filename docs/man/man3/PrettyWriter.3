.TH "PrettyWriter< OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags >" 3 "Thu Nov 3 2016" "Version 0.9" "EXASockets" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PrettyWriter< OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags > \- \fBWriter\fP with indentation and spacing\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <prettywriter\&.h>\fP
.PP
Inherits \fBWriter< OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBWriter\fP< OutputStream, SourceEncoding, TargetEncoding, StackAllocator > \fBBase\fP"
.br
.ti -1c
.RI "typedef Base::Ch \fBCh\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPrettyWriter\fP (OutputStream &os, StackAllocator *allocator=0, size_t levelDepth=Base::kDefaultLevelDepth)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fBPrettyWriter\fP (StackAllocator *allocator=0, size_t levelDepth=Base::kDefaultLevelDepth)"
.br
.ti -1c
.RI "\fBPrettyWriter\fP & \fBSetIndent\fP (Ch indentChar, unsigned indentCharCount)"
.br
.RI "Set custom indentation\&. "
.ti -1c
.RI "\fBPrettyWriter\fP & \fBSetFormatOptions\fP (PrettyFormatOptions options)"
.br
.RI "Set pretty writer formatting options\&. "
.ti -1c
.RI "bool \fBRawValue\fP (const Ch *json, size_t length, \fBType\fP type)"
.br
.RI "Write a raw JSON value\&. "
.in -1c
.PP
.RI "\fBImplementation of Handler\fP"
.br

.PP
\fBSee also:\fP
.RS 4
Handler 
.RE
.PP

.PP
.in +1c
.in +1c
.ti -1c
.RI "bool \fBNull\fP ()"
.br
.ti -1c
.RI "bool \fBBool\fP (bool b)"
.br
.ti -1c
.RI "bool \fBInt\fP (int i)"
.br
.ti -1c
.RI "bool \fBUint\fP (unsigned u)"
.br
.ti -1c
.RI "bool \fBInt64\fP (int64_t i64)"
.br
.ti -1c
.RI "bool \fBUint64\fP (uint64_t u64)"
.br
.ti -1c
.RI "bool \fBDouble\fP (double d)"
.br
.ti -1c
.RI "bool \fBRawNumber\fP (const Ch *str, \fBSizeType\fP length, bool copy=false)"
.br
.ti -1c
.RI "bool \fBString\fP (const Ch *str, \fBSizeType\fP length, bool copy=false)"
.br
.ti -1c
.RI "bool \fBStartObject\fP ()"
.br
.ti -1c
.RI "bool \fBKey\fP (const Ch *str, \fBSizeType\fP length, bool copy=false)"
.br
.ti -1c
.RI "bool \fBEndObject\fP (\fBSizeType\fP memberCount=0)"
.br
.ti -1c
.RI "bool \fBStartArray\fP ()"
.br
.ti -1c
.RI "bool \fBEndArray\fP (\fBSizeType\fP memberCount=0)"
.br
.in -1c
.in -1c
.PP
.RI "\fBConvenience extensions\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "bool \fBString\fP (const Ch *str)"
.br
.RI "Simpler but slower overload\&. "
.ti -1c
.RI "bool \fBKey\fP (const Ch *str)"
.br
.in -1c
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBPrettyPrefix\fP (\fBType\fP type)"
.br
.ti -1c
.RI "void \fBWriteIndent\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "Ch \fBindentChar_\fP"
.br
.ti -1c
.RI "unsigned \fBindentCharCount_\fP"
.br
.ti -1c
.RI "PrettyFormatOptions \fBformatOptions_\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 

.SS "template<typename OutputStream, typename SourceEncoding = UTF8<>, typename TargetEncoding = UTF8<>, typename StackAllocator = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags>
.br
class PrettyWriter< OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags >"
\fBWriter\fP with indentation and spacing\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOutputStream\fP Type of ouptut os\&. 
.br
\fISourceEncoding\fP Encoding of source string\&. 
.br
\fITargetEncoding\fP Encoding of output stream\&. 
.br
\fIStackAllocator\fP Type of allocator for allocating memory of stack\&. 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename OutputStream , typename SourceEncoding  = UTF8<>, typename TargetEncoding  = UTF8<>, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags> \fBPrettyWriter\fP< OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags >::\fBPrettyWriter\fP (OutputStream & os, StackAllocator * allocator = \fC0\fP, size_t levelDepth = \fCBase::kDefaultLevelDepth\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIos\fP Output stream\&. 
.br
\fIallocator\fP User supplied allocator\&. If it is null, it will create a private one\&. 
.br
\fIlevelDepth\fP Initial capacity of stack\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename OutputStream , typename SourceEncoding  = UTF8<>, typename TargetEncoding  = UTF8<>, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags> bool \fBPrettyWriter\fP< OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags >::RawValue (const Ch * json, size_t length, \fBType\fP type)\fC [inline]\fP"

.PP
Write a raw JSON value\&. For user to write a stringified JSON as a value\&.
.PP
\fBParameters:\fP
.RS 4
\fIjson\fP A well-formed JSON value\&. It should not contain null character within [0, length - 1] range\&. 
.br
\fIlength\fP Length of the json\&. 
.br
\fItype\fP Type of the root of json\&. 
.RE
.PP
\fBNote:\fP
.RS 4
When using \fBPrettyWriter::RawValue()\fP, the result json may not be indented correctly\&. 
.RE
.PP

.SS "template<typename OutputStream , typename SourceEncoding  = UTF8<>, typename TargetEncoding  = UTF8<>, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags> \fBPrettyWriter\fP& \fBPrettyWriter\fP< OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags >::SetFormatOptions (PrettyFormatOptions options)\fC [inline]\fP"

.PP
Set pretty writer formatting options\&. 
.PP
\fBParameters:\fP
.RS 4
\fIoptions\fP Formatting options\&. 
.RE
.PP

.SS "template<typename OutputStream , typename SourceEncoding  = UTF8<>, typename TargetEncoding  = UTF8<>, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags> \fBPrettyWriter\fP& \fBPrettyWriter\fP< OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags >::SetIndent (Ch indentChar, unsigned indentCharCount)\fC [inline]\fP"

.PP
Set custom indentation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindentChar\fP Character for indentation\&. Must be whitespace character (' ', '\\t', '\\n', '\\r')\&. 
.br
\fIindentCharCount\fP Number of indent characters for each indentation level\&. 
.RE
.PP
\fBNote:\fP
.RS 4
The default indentation is 4 spaces\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for EXASockets from the source code\&.
