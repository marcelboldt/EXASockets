<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.12">
    <compounddef id="memorybuffer_8h" kind="file" language="C++">
        <compoundname>memorybuffer.h</compoundname>
        <includes refid="stream_8h" local="yes">stream.h</includes>
        <includes refid="stack_8h" local="yes">internal/stack.h</includes>
        <incdepgraph>
            <node id="449">
                <label>rapidjson/memorybuffer.h</label>
                <link refid="memorybuffer_8h"/>
                <childnode refid="450" relation="include">
                </childnode>
                <childnode refid="456" relation="include">
                </childnode>
            </node>
            <node id="454">
                <label>cassert</label>
            </node>
            <node id="458">
                <label>swap.h</label>
                <link refid="swap_8h_source"/>
                <childnode refid="451" relation="include">
                </childnode>
            </node>
            <node id="455">
                <label>encodings.h</label>
                <link refid="encodings_8h_source"/>
                <childnode refid="451" relation="include">
                </childnode>
            </node>
            <node id="450">
                <label>stream.h</label>
                <link refid="stream_8h_source"/>
                <childnode refid="451" relation="include">
                </childnode>
                <childnode refid="455" relation="include">
                </childnode>
            </node>
            <node id="451">
                <label>rapidjson.h</label>
                <link refid="rapidjson_8h"/>
                <childnode refid="452" relation="include">
                </childnode>
                <childnode refid="453" relation="include">
                </childnode>
                <childnode refid="454" relation="include">
                </childnode>
            </node>
            <node id="456">
                <label>internal/stack.h</label>
                <link refid="stack_8h_source"/>
                <childnode refid="457" relation="include">
                </childnode>
                <childnode refid="458" relation="include">
                </childnode>
            </node>
            <node id="452">
                <label>cstdlib</label>
            </node>
            <node id="457">
                <label>../allocators.h</label>
                <link refid="allocators_8h_source"/>
                <childnode refid="451" relation="include">
                </childnode>
            </node>
            <node id="453">
                <label>cstring</label>
            </node>
        </incdepgraph>
        <innerclass refid="struct_generic_memory_buffer" prot="public">GenericMemoryBuffer</innerclass>
        <sectiondef kind="typedef">
            <memberdef kind="typedef" id="memorybuffer_8h_1aad74f4c6994a951097a63ee117039085" prot="public" static="no">
                <type>
                    <ref refid="struct_generic_memory_buffer" kindref="compound">GenericMemoryBuffer</ref>
                </type>
                <definition>typedef GenericMemoryBuffer MemoryBuffer</definition>
                <argsstring></argsstring>
                <name>MemoryBuffer</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/memorybuffer.h" line="60" column="1" bodyfile="rapidjson/memorybuffer.h"
                          bodystart="60" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="func">
            <memberdef kind="function" id="memorybuffer_8h_1a635d8eaaf48777150dc08f7d5a8be054" prot="public" static="no"
                       const="no" explicit="no" inline="yes" virt="non-virtual">
                <templateparamlist>
                </templateparamlist>
                <type>void</type>
                <definition>void PutN</definition>
                <argsstring>(MemoryBuffer &amp;memoryBuffer, char c, size_t n)</argsstring>
                <name>PutN</name>
                <param>
                    <type>
                        <ref refid="struct_generic_memory_buffer" kindref="compound">MemoryBuffer</ref>
                        &amp;
                    </type>
                    <declname>memoryBuffer</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>c</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>n</declname>
                </param>
                <briefdescription>
                    <para>Implement specialized version of PutN() with memset() for better performance.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/memorybuffer.h" line="64" column="1" bodyfile="rapidjson/memorybuffer.h"
                          bodystart="64" bodyend="66"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1">
                <highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>
                    source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="2">
                <highlight class="normal"></highlight>
                <highlight class="comment">//
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="3">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>
                    Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.<sp/>All<sp/>rights<sp/>reserved.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="4">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="5">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);
                    <sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="6">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>
                    obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="7">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="8">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>http://opensource.org/licenses/MIT
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="9">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="10">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed
                    <sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="11">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>
                    &quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="12">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>
                    implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="13">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>
                    limitations<sp/>under<sp/>the<sp/>License.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifndef<sp/>RAPIDJSON_MEMORYBUFFER_H_
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#define<sp/>RAPIDJSON_MEMORYBUFFER_H_
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;stream.h&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;internal/stack.h&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="normal">
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc"
                         kindref="member">RAPIDJSON_NAMESPACE_BEGIN
                    </ref>
                </highlight>
            </codeline>
            <codeline lineno="22">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="24"></codeline>
            <codeline lineno="36">
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>Allocator<sp/>=<sp/>CrtAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="37">
                <highlight class="normal"></highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">
                    <ref refid="struct_generic_memory_buffer" kindref="compound">GenericMemoryBuffer</ref>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="38">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>Ch;
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>byte
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="39">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="40">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="struct_generic_memory_buffer" kindref="compound">GenericMemoryBuffer</ref>(Allocator*
                    <sp/>allocator<sp/>=<sp/>0,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>capacity<sp/>=<sp/>kDefaultCapacity)<sp/>:<sp/>stack_(allocator,<sp/>
                    capacity)<sp/>{}
                </highlight>
            </codeline>
            <codeline lineno="41">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="42">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Put(Ch<sp/>c)<sp/>{<sp/>*stack_.template<sp/>Push&lt;Ch&gt;()<sp/>=<sp/>
                    c;<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="43">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Flush()<sp/>{}
                </highlight>
            </codeline>
            <codeline lineno="44">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="45">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Clear()<sp/>{<sp/>stack_.Clear();<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="46">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>ShrinkToFit()<sp/>{<sp/>stack_.ShrinkToFit();<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="47">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch*<sp/>Push(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>count)<sp/>{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>stack_.template<sp/>Push&lt;Ch&gt;(count);<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="48">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Pop(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>count)<sp/>{<sp/>stack_.template<sp/>Pop&lt;Ch&gt;(count);<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="49">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="50">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>GetBuffer()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="51">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>stack_.template<sp/>Bottom&lt;Ch&gt;();
                </highlight>
            </codeline>
            <codeline lineno="52">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="53">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="54">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>GetSize()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>stack_.GetSize();<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="55">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="56">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>kDefaultCapacity<sp/>=<sp/>256;
                </highlight>
            </codeline>
            <codeline lineno="57">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">mutable</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="classinternal_1_1_stack" kindref="compound">internal::Stack&lt;Allocator&gt;</ref>
                    <sp/>stack_;
                </highlight>
            </codeline>
            <codeline lineno="58">
                <highlight class="normal">};</highlight>
            </codeline>
            <codeline lineno="59">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="60">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_memory_buffer" kindref="compound">GenericMemoryBuffer&lt;&gt;</ref>
                    <sp/>
                    <ref refid="struct_generic_memory_buffer" kindref="compound">MemoryBuffer</ref>;
                </highlight>
            </codeline>
            <codeline lineno="61">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="63">
                <highlight class="keyword">template</highlight>
                <highlight class="normal">&lt;&gt;</highlight>
            </codeline>
            <codeline lineno="64">
                <highlight class="normal"></highlight>
                <highlight class="keyword">inline</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>PutN(MemoryBuffer&amp;<sp/>memoryBuffer,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>c,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>n)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="65">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::memset(memoryBuffer.stack_.Push&lt;
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal">&gt;(n),<sp/>c,<sp/>n<sp/>*
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(c));</highlight>
            </codeline>
            <codeline lineno="66">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="67">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="68">
                <highlight class="normal">
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1"
                         kindref="member">RAPIDJSON_NAMESPACE_END
                    </ref>
                </highlight>
            </codeline>
            <codeline lineno="69">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="70">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif<sp/>//<sp/>RAPIDJSON_MEMORYBUFFER_H_
                </highlight>
            </codeline>
        </programlisting>
        <location file="rapidjson/memorybuffer.h"/>
    </compounddef>
</doxygen>
