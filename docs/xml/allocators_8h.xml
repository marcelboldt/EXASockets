<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.12">
    <compounddef id="allocators_8h" kind="file" language="C++">
        <compoundname>allocators.h</compoundname>
        <includes refid="rapidjson_8h" local="yes">rapidjson.h</includes>
        <includedby refid="reader_8h" local="yes">rapidjson/reader.h</includedby>
        <includedby refid="stack_8h" local="yes">rapidjson/internal/stack.h</includedby>
        <includedby refid="regex_8h" local="yes">rapidjson/internal/regex.h</includedby>
        <incdepgraph>
            <node id="153">
                <label>cassert</label>
            </node>
            <node id="150">
                <label>rapidjson.h</label>
                <link refid="rapidjson_8h"/>
                <childnode refid="151" relation="include">
                </childnode>
                <childnode refid="152" relation="include">
                </childnode>
                <childnode refid="153" relation="include">
                </childnode>
            </node>
            <node id="151">
                <label>cstdlib</label>
            </node>
            <node id="149">
                <label>rapidjson/allocators.h</label>
                <link refid="allocators_8h"/>
                <childnode refid="150" relation="include">
                </childnode>
            </node>
            <node id="152">
                <label>cstring</label>
            </node>
        </incdepgraph>
        <invincdepgraph>
            <node id="158">
                <label>rapidjson/pointer.h</label>
                <link refid="pointer_8h_source"/>
                <childnode refid="159" relation="include">
                </childnode>
            </node>
            <node id="163">
                <label>rapidjson/stringbuffer.h</label>
                <link refid="stringbuffer_8h_source"/>
                <childnode refid="161" relation="include">
                </childnode>
                <childnode refid="157" relation="include">
                </childnode>
            </node>
            <node id="162">
                <label>rapidjson/prettywriter.h</label>
                <link refid="prettywriter_8h_source"/>
            </node>
            <node id="165">
                <label>rapidjson/memorybuffer.h</label>
                <link refid="memorybuffer_8h_source"/>
            </node>
            <node id="161">
                <label>rapidjson/writer.h</label>
                <link refid="writer_8h_source"/>
                <childnode refid="157" relation="include">
                </childnode>
                <childnode refid="162" relation="include">
                </childnode>
            </node>
            <node id="155">
                <label>rapidjson/reader.h</label>
                <link refid="reader_8h"/>
                <childnode refid="156" relation="include">
                </childnode>
            </node>
            <node id="164">
                <label>rapidjson/internal/regex.h</label>
                <link refid="regex_8h_source"/>
                <childnode refid="159" relation="include">
                </childnode>
            </node>
            <node id="160">
                <label>rapidjson/internal/stack.h</label>
                <link refid="stack_8h_source"/>
                <childnode refid="155" relation="include">
                </childnode>
                <childnode refid="161" relation="include">
                </childnode>
                <childnode refid="163" relation="include">
                </childnode>
                <childnode refid="164" relation="include">
                </childnode>
                <childnode refid="165" relation="include">
                </childnode>
            </node>
            <node id="157">
                <label>exasockets/exasockets.h</label>
                <link refid="exasockets_8h_source"/>
            </node>
            <node id="154">
                <label>rapidjson/allocators.h</label>
                <link refid="allocators_8h"/>
                <childnode refid="155" relation="include">
                </childnode>
                <childnode refid="160" relation="include">
                </childnode>
                <childnode refid="164" relation="include">
                </childnode>
            </node>
            <node id="159">
                <label>rapidjson/schema.h</label>
                <link refid="schema_8h_source"/>
            </node>
            <node id="156">
                <label>rapidjson/document.h</label>
                <link refid="document_8h"/>
                <childnode refid="157" relation="include">
                </childnode>
                <childnode refid="158" relation="include">
                </childnode>
                <childnode refid="159" relation="include">
                </childnode>
            </node>
        </invincdepgraph>
        <innerclass refid="class_crt_allocator" prot="public">CrtAllocator</innerclass>
        <innerclass refid="class_memory_pool_allocator" prot="public">MemoryPoolAllocator</innerclass>
        <innerclass refid="struct_memory_pool_allocator_1_1_chunk_header" prot="private">
            MemoryPoolAllocator::ChunkHeader
        </innerclass>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1">
                <highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>
                    source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="2">
                <highlight class="normal"></highlight>
                <highlight class="comment">//
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="3">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>
                    Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.<sp/>All<sp/>rights<sp/>reserved.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="4">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="5">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);
                    <sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="6">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>
                    obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="7">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="8">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>http://opensource.org/licenses/MIT
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="9">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="10">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed
                    <sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="11">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>
                    &quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="12">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>
                    implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="13">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>
                    limitations<sp/>under<sp/>the<sp/>License.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifndef<sp/>RAPIDJSON_ALLOCATORS_H_
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#define<sp/>RAPIDJSON_ALLOCATORS_H_
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="rapidjson_8h" kindref="compound">
                    rapidjson.h</ref>&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="normal">
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc"
                         kindref="member">RAPIDJSON_NAMESPACE_BEGIN
                    </ref>
                </highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="23">
                <highlight class="comment">//<sp/>Allocator
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="24">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="55">
                <highlight class="comment">//<sp/>CrtAllocator
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="57">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="59"></codeline>
            <codeline lineno="62" refid="class_crt_allocator" refkind="compound">
                <highlight class="keyword">class
                    <sp/>
                </highlight>
                <highlight class="normal">
                    <ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="63">
                <highlight class="normal"></highlight>
                <highlight class="keyword">public</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="64">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>kNeedFree<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="65">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">*<sp/>Malloc(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>size)<sp/>{
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="66">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(size)
                    <sp/>
                </highlight>
                <highlight class="comment">//
                    <sp/>
                    <sp/>behavior<sp/>of<sp/>malloc(0)<sp/>is<sp/>implementation<sp/>defined.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="67">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>std::malloc(size);
                </highlight>
            </codeline>
            <codeline lineno="68">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="69">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>NULL;
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>standardize<sp/>to<sp/>returning<sp/>NULL.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="70">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="71">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">*<sp/>Realloc(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">*<sp/>originalPtr,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>originalSize,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>newSize)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="72">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>(void)originalSize;
                </highlight>
            </codeline>
            <codeline lineno="73">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(newSize<sp/>==<sp/>0)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="74">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::free(originalPtr);
                </highlight>
            </codeline>
            <codeline lineno="75">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>NULL;
                </highlight>
            </codeline>
            <codeline lineno="76">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="77">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>std::realloc(originalPtr,<sp/>newSize);
                </highlight>
            </codeline>
            <codeline lineno="78">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="79">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Free(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*ptr)<sp/>{<sp/>std::free(ptr);<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="80">
                <highlight class="normal">};</highlight>
            </codeline>
            <codeline lineno="81">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="83">
                <highlight class="comment">//<sp/>MemoryPoolAllocator
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="84">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="86"></codeline>
            <codeline lineno="101">
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>BaseAllocator<sp/>=<sp/>CrtAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="102" refid="class_memory_pool_allocator" refkind="compound">
                <highlight class="normal"></highlight>
                <highlight class="keyword">class
                    <sp/>
                </highlight>
                <highlight class="normal">
                    <ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="103">
                <highlight class="normal"></highlight>
                <highlight class="keyword">public</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="104" refid="class_memory_pool_allocator_1ab4c7c5c631e451689bc9da392a65194f"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>kNeedFree<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="105">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="107"></codeline>
            <codeline lineno="110" refid="class_memory_pool_allocator_1aeec85ac657f242ac5620115141be5209"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_memory_pool_allocator_1aeec85ac657f242ac5620115141be5209" kindref="member">
                        MemoryPoolAllocator</ref>(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>chunkSize<sp/>=<sp/>kDefaultChunkCapacity,<sp/>BaseAllocator*<sp/>
                    baseAllocator<sp/>=<sp/>0)<sp/>:
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="111">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_(0),<sp/>chunk_capacity_(chunkSize),<sp/>userBuffer_(0),<sp/>
                    baseAllocator_(baseAllocator),<sp/>ownBaseAllocator_(0)
                </highlight>
            </codeline>
            <codeline lineno="112">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="113">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="114">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="116"></codeline>
            <codeline lineno="125" refid="class_memory_pool_allocator_1a1f0d865093fdb955d956b7a445a8ddbf"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_memory_pool_allocator_1a1f0d865093fdb955d956b7a445a8ddbf" kindref="member">
                        MemoryPoolAllocator</ref>(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*buffer,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>size,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>chunkSize<sp/>=<sp/>kDefaultChunkCapacity,<sp/>BaseAllocator*<sp/>
                    baseAllocator<sp/>=<sp/>0)<sp/>:
                </highlight>
            </codeline>
            <codeline lineno="126">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_(0),<sp/>chunk_capacity_(chunkSize),<sp/>userBuffer_(buffer),<sp/>
                    baseAllocator_(baseAllocator),<sp/>ownBaseAllocator_(0)
                </highlight>
            </codeline>
            <codeline lineno="127">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="128">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(buffer<sp/>!=<sp/>0);
                </highlight>
            </codeline>
            <codeline lineno="129">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(size<sp/>&gt;
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(ChunkHeader));</highlight>
            </codeline>
            <codeline lineno="130">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">reinterpret_cast&lt;</highlight>
                <highlight class="normal">ChunkHeader*</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(buffer);</highlight>
            </codeline>
            <codeline lineno="131">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_-&gt;capacity<sp/>=<sp/>size<sp/>-
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(ChunkHeader);</highlight>
            </codeline>
            <codeline lineno="132">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_-&gt;size<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="133">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_-&gt;next<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="134">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="135">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="137"></codeline>
            <codeline lineno="139" refid="class_memory_pool_allocator_1ad4eee0ef3cfe8cda31034fbce98b7a9b"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_memory_pool_allocator_1ad4eee0ef3cfe8cda31034fbce98b7a9b" kindref="member">
                        ~MemoryPoolAllocator</ref>()<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="140">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Clear();
                </highlight>
            </codeline>
            <codeline lineno="141">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a" kindref="member">RAPIDJSON_DELETE</ref>
                    (ownBaseAllocator_);
                </highlight>
            </codeline>
            <codeline lineno="142">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="143">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="145" refid="class_memory_pool_allocator_1a57bbc80e570db6110901b9a7e36dbda0"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_memory_pool_allocator_1a57bbc80e570db6110901b9a7e36dbda0" kindref="member">
                        Clear</ref>()<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="146">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">while</highlight>
                <highlight class="normal"><sp/>(chunkHead_<sp/>&amp;&amp;<sp/>chunkHead_<sp/>!=<sp/>userBuffer_)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="147">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ChunkHeader*<sp/>next<sp/>=<sp/>chunkHead_-&gt;next;
                </highlight>
            </codeline>
            <codeline lineno="148">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>baseAllocator_-&gt;Free(chunkHead_);
                </highlight>
            </codeline>
            <codeline lineno="149">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_<sp/>=<sp/>next;
                </highlight>
            </codeline>
            <codeline lineno="150">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="151">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(chunkHead_<sp/>&amp;&amp;<sp/>chunkHead_<sp/>==<sp/>userBuffer_)
                </highlight>
            </codeline>
            <codeline lineno="152">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_-&gt;size<sp/>=<sp/>0;
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Clear<sp/>user<sp/>buffer
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="153">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="154">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="156"></codeline>
            <codeline lineno="158" refid="class_memory_pool_allocator_1a5672e0833fda2e71ce987911397489ed"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_memory_pool_allocator_1a5672e0833fda2e71ce987911397489ed" kindref="member">
                        Capacity</ref>()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="159">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>capacity<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="160">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(ChunkHeader*<sp/>c<sp/>=<sp/>chunkHead_;<sp/>c<sp/>!=<sp/>0;<sp/>c<sp/>=
                    <sp/>c-&gt;next)
                </highlight>
            </codeline>
            <codeline lineno="161">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>capacity<sp/>+=<sp/>c-&gt;capacity;
                </highlight>
            </codeline>
            <codeline lineno="162">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>capacity;
                </highlight>
            </codeline>
            <codeline lineno="163">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="164">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="166"></codeline>
            <codeline lineno="168" refid="class_memory_pool_allocator_1ae7fcf0341c13e899cf488bc7c8949956"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_memory_pool_allocator_1ae7fcf0341c13e899cf488bc7c8949956" kindref="member">
                        Size</ref>()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="169">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>size<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="170">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(ChunkHeader*<sp/>c<sp/>=<sp/>chunkHead_;<sp/>c<sp/>!=<sp/>0;<sp/>c<sp/>=
                    <sp/>c-&gt;next)
                </highlight>
            </codeline>
            <codeline lineno="171">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>size<sp/>+=<sp/>c-&gt;size;
                </highlight>
            </codeline>
            <codeline lineno="172">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>size;
                </highlight>
            </codeline>
            <codeline lineno="173">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="174">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="176" refid="class_memory_pool_allocator_1a02f6832910453446cb77bf919ba49e99"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">*
                    <sp/>
                    <ref refid="class_memory_pool_allocator_1a02f6832910453446cb77bf919ba49e99" kindref="member">
                        Malloc</ref>(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>size)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="177">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!size)
                </highlight>
            </codeline>
            <codeline lineno="178">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>NULL;
                </highlight>
            </codeline>
            <codeline lineno="179">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="180">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>size<sp/>=
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242"
                         kindref="member">RAPIDJSON_ALIGN</ref>(size);
                </highlight>
            </codeline>
            <codeline lineno="181">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(chunkHead_<sp/>==<sp/>0<sp/>||<sp/>chunkHead_-&gt;size<sp/>+<sp/>size
                    <sp/>&gt;<sp/>chunkHead_-&gt;capacity)
                </highlight>
            </codeline>
            <codeline lineno="182">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!AddChunk(chunk_capacity_<sp/>&gt;<sp/>size<sp/>?<sp/>chunk_capacity_
                    <sp/>:<sp/>size))
                </highlight>
            </codeline>
            <codeline lineno="183">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>NULL;
                </highlight>
            </codeline>
            <codeline lineno="184">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="185">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*buffer<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">reinterpret_cast&lt;</highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>*
                </highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(chunkHead_)<sp/>+
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242"
                         kindref="member">RAPIDJSON_ALIGN</ref>(
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(ChunkHeader))<sp/>+<sp/>chunkHead_-&gt;size;
                </highlight>
            </codeline>
            <codeline lineno="186">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_-&gt;size<sp/>+=<sp/>size;
                </highlight>
            </codeline>
            <codeline lineno="187">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>buffer;
                </highlight>
            </codeline>
            <codeline lineno="188">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="189">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="191" refid="class_memory_pool_allocator_1aba75280d42184b0ad414243f7f5ac6c7"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">*
                    <sp/>
                    <ref refid="class_memory_pool_allocator_1aba75280d42184b0ad414243f7f5ac6c7" kindref="member">
                        Realloc</ref>(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">*<sp/>originalPtr,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>originalSize,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>newSize)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="192">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(originalPtr<sp/>==<sp/>0)
                </highlight>
            </codeline>
            <codeline lineno="193">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Malloc(newSize);
                </highlight>
            </codeline>
            <codeline lineno="194">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="195">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(newSize<sp/>==<sp/>0)
                </highlight>
            </codeline>
            <codeline lineno="196">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>NULL;
                </highlight>
            </codeline>
            <codeline lineno="197">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="198">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>originalSize<sp/>=
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242"
                         kindref="member">RAPIDJSON_ALIGN</ref>(originalSize);
                </highlight>
            </codeline>
            <codeline lineno="199">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>newSize<sp/>=
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242"
                         kindref="member">RAPIDJSON_ALIGN</ref>(newSize);
                </highlight>
            </codeline>
            <codeline lineno="200">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="201">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Do<sp/>not<sp/>shrink<sp/>if<sp/>new<sp/>size<sp/>is<sp/>smaller<sp/>
                    than<sp/>original
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="202">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(originalSize<sp/>&gt;=<sp/>newSize)
                </highlight>
            </codeline>
            <codeline lineno="203">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>originalPtr;
                </highlight>
            </codeline>
            <codeline lineno="204">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="205">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Simply<sp/>expand<sp/>it<sp/>if<sp/>it<sp/>is<sp/>the<sp/>last<sp/>
                    allocation<sp/>and<sp/>there<sp/>is<sp/>sufficient<sp/>space
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="206">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(originalPtr<sp/>==<sp/>reinterpret_cast&lt;char<sp/>*&gt;(chunkHead_)
                    <sp/>+
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242"
                         kindref="member">RAPIDJSON_ALIGN</ref>(
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(ChunkHeader))<sp/>+<sp/>chunkHead_-&gt;size<sp/>-<sp/>originalSize)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="207">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>increment<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(newSize<sp/>-<sp/>originalSize);
                </highlight>
            </codeline>
            <codeline lineno="208">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(chunkHead_-&gt;size<sp/>+<sp/>increment<sp/>&lt;=<sp/>chunkHead_-&gt;capacity)
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="209">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_-&gt;size<sp/>+=<sp/>increment;
                </highlight>
            </codeline>
            <codeline lineno="210">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>originalPtr;
                </highlight>
            </codeline>
            <codeline lineno="211">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="212">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="213">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="214">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Realloc<sp/>process:<sp/>allocate<sp/>and<sp/>copy<sp/>memory,<sp/>do
                    <sp/>not<sp/>free<sp/>original<sp/>buffer.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="215">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">*<sp/>newBuffer<sp/>=<sp/>Malloc(newSize))<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="216">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(originalSize)
                </highlight>
            </codeline>
            <codeline lineno="217">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::memcpy(newBuffer,<sp/>originalPtr,<sp/>originalSize);
                </highlight>
            </codeline>
            <codeline lineno="218">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>newBuffer;
                </highlight>
            </codeline>
            <codeline lineno="219">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="220">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="221">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>NULL;
                </highlight>
            </codeline>
            <codeline lineno="222">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="223">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="225" refid="class_memory_pool_allocator_1a6b180eb150451b4df8b70d827cd1191c"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_memory_pool_allocator_1a6b180eb150451b4df8b70d827cd1191c" kindref="member">
                        Free</ref>(
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*ptr)<sp/>{<sp/>(void)ptr;<sp/>}
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Do<sp/>nothing
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="226">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="227">
                <highlight class="normal"></highlight>
                <highlight class="keyword">private</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="229">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;<sp/>rhs)
                    <sp/>
                </highlight>
                <highlight class="comment">/*<sp/>=<sp/>delete<sp/>*/
                </highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="231">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;<sp/>
                    operator=(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;<sp/>rhs)
                    <sp/>
                </highlight>
                <highlight class="comment">/*<sp/>=<sp/>delete<sp/>*/
                </highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="232">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="234"></codeline>
            <codeline lineno="237">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>AddChunk(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>capacity)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="238">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!baseAllocator_)
                </highlight>
            </codeline>
            <codeline lineno="239">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ownBaseAllocator_<sp/>=<sp/>baseAllocator_<sp/>=
                    <sp/>
                    <ref refid="rapidjson_8h_1ab9e102fa2f1a0ae4914d4dac21f690a2" kindref="member">RAPIDJSON_NEW</ref>
                    (BaseAllocator());
                </highlight>
            </codeline>
            <codeline lineno="240">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(ChunkHeader*<sp/>chunk<sp/>=<sp/>reinterpret_cast&lt;ChunkHeader*&gt;(baseAllocator_-&gt;Malloc(<ref
                        refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242"
                        kindref="member">RAPIDJSON_ALIGN</ref>(
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(ChunkHeader))<sp/>+<sp/>capacity)))<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="241">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunk-&gt;capacity<sp/>=<sp/>capacity;
                </highlight>
            </codeline>
            <codeline lineno="242">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunk-&gt;size<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="243">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunk-&gt;next<sp/>=<sp/>chunkHead_;
                </highlight>
            </codeline>
            <codeline lineno="244">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>chunkHead_<sp/>=
                    <sp/>
                    <sp/>chunk;
                </highlight>
            </codeline>
            <codeline lineno="245">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="246">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="247">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="248">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="249">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="250">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="251">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>kDefaultChunkCapacity<sp/>=<sp/>64<sp/>*<sp/>1024;
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="252">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="254"></codeline>
            <codeline lineno="256">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">ChunkHeader<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="257">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>capacity;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="258">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>size;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="259">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ChunkHeader<sp/>*next;
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="260">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>};
                </highlight>
            </codeline>
            <codeline lineno="261">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="262">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ChunkHeader<sp/>*chunkHead_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="263">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>chunk_capacity_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="264">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>*userBuffer_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="265">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>BaseAllocator*<sp/>baseAllocator_;
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="266">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>BaseAllocator*<sp/>ownBaseAllocator_;
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="267">
                <highlight class="normal">};</highlight>
            </codeline>
            <codeline lineno="268">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="269">
                <highlight class="normal">
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1"
                         kindref="member">RAPIDJSON_NAMESPACE_END
                    </ref>
                </highlight>
            </codeline>
            <codeline lineno="270">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="271">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif<sp/>//<sp/>RAPIDJSON_ENCODINGS_H_
                </highlight>
            </codeline>
        </programlisting>
        <location file="rapidjson/allocators.h"/>
    </compounddef>
</doxygen>
