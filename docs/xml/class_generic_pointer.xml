<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.12">
    <compounddef id="class_generic_pointer" kind="class" language="C++" prot="public">
        <compoundname>GenericPointer</compoundname>
        <includes refid="pointer_8h" local="no">pointer.h</includes>
        <innerclass refid="class_generic_pointer_1_1_percent_decode_stream" prot="private">
            GenericPointer::PercentDecodeStream
        </innerclass>
        <innerclass refid="class_generic_pointer_1_1_percent_encode_stream" prot="private">
            GenericPointer::PercentEncodeStream
        </innerclass>
        <innerclass refid="struct_generic_pointer_1_1_token" prot="public">GenericPointer::Token</innerclass>
        <templateparamlist>
            <param>
                <type>typename</type>
                <declname>ValueType</declname>
                <defname>ValueType</defname>
            </param>
            <param>
                <type>typename</type>
                <declname>Allocator</declname>
                <defname>Allocator</defname>
                <defval>
                    <ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>
                </defval>
            </param>
        </templateparamlist>
        <sectiondef kind="user-defined">
            <header>Constructors and destructor.</header>
            <memberdef kind="function" id="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" prot="public"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type></type>
                <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
                <argsstring>(Allocator *allocator=0)</argsstring>
                <name>GenericPointer</name>
                <param>
                    <type>Allocator *</type>
                    <declname>allocator</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Default constructor.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="109" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="109" bodyend="109"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" prot="public"
                       static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
                <type></type>
                <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
                <argsstring>(const Ch *source, Allocator *allocator=0)</argsstring>
                <name>GenericPointer</name>
                <param>
                    <type>const <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">
                        Ch
                    </ref> *
                    </type>
                    <declname>source</declname>
                </param>
                <param>
                    <type>Allocator *</type>
                    <declname>allocator</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Constructor that parses a string or URI fragment representation.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>source</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A null-terminated, string or URI fragment representation of JSON pointer.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>allocator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>User supplied allocator for this pointer. If no allocator is provided, it
                                        creates a self-owned one.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="116" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="116" bodyend="118"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" prot="public"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type></type>
                <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
                <argsstring>(const Ch *source, size_t length, Allocator *allocator=0)</argsstring>
                <name>GenericPointer</name>
                <param>
                    <type>const <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">
                        Ch
                    </ref> *
                    </type>
                    <declname>source</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>length</declname>
                </param>
                <param>
                    <type>Allocator *</type>
                    <declname>allocator</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Constructor that parses a string or URI fragment representation, with length of the source
                        string.
                    </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>source</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A string or URI fragment representation of JSON pointer.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>length</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of source.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>allocator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>User supplied allocator for this pointer. If no allocator is provided, it
                                        creates a self-owned one.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>Slightly faster than the overload without length.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="139" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="139" bodyend="141"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" prot="public"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type></type>
                <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
                <argsstring>(const Token *tokens, size_t tokenCount)</argsstring>
                <name>GenericPointer</name>
                <param>
                    <type>const <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> *
                    </type>
                    <declname>tokens</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>tokenCount</declname>
                </param>
                <briefdescription>
                    <para>Constructor with user-supplied tokens.</para>
                </briefdescription>
                <detaileddescription>
                    <para>This constructor let user supplies const array of tokens. This prevents the parsing process
                        and eliminates allocation. This is preferred for memory constrained environments.
                    </para>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokens</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>An constant array of tokens representing the JSON pointer.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenCount</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of tokens.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <bold>Example</bold>
                        <programlisting>
                            <codeline>
                                <highlight class="normal">#define<sp/>NAME(s)<sp/>{<sp/>s,<sp/>sizeof(s)<sp/>/<sp/>
                                    sizeof(s[0])<sp/>-<sp/>1,<sp/>kPointerInvalidIndex<sp/>}
                                </highlight>
                            </codeline>
                            <codeline>
                                <highlight class="normal">#define<sp/>INDEX(i)<sp/>{<sp/>#i,<sp/>sizeof(#i)<sp/>-<sp/>1,
                                    <sp/>i<sp/>}
                                </highlight>
                            </codeline>
                            <codeline></codeline>
                            <codeline>
                                <highlight class="normal">static<sp/>const<sp/>Pointer::Token<sp/>kTokens[]<sp/>=<sp/>{
                                    <sp/>NAME(&quot;foo&quot;),<sp/>INDEX(123)<sp/>};
                                </highlight>
                            </codeline>
                            <codeline>
                                <highlight class="normal">static<sp/>const<sp/>Pointer<sp/>p(kTokens,<sp/>
                                    sizeof(kTokens)<sp/>/<sp/>sizeof(kTokens[0]));
                                </highlight>
                            </codeline>
                            <codeline>
                                <highlight class="normal">//<sp/>Equivalent<sp/>to<sp/>static<sp/>const<sp/>Pointer<sp/>
                                    p(&quot;/foo/123&quot;);
                                </highlight>
                            </codeline>
                            <codeline></codeline>
                            <codeline>
                                <highlight class="normal">#undef<sp/>NAME
                                </highlight>
                            </codeline>
                            <codeline>
                                <highlight class="normal">#undef<sp/>INDEX
                                </highlight>
                            </codeline>
                        </programlisting>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="165" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="165" bodyend="165"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a18d671bb793c6b843d5496b2b130cb70" prot="public"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type></type>
                <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
                <argsstring>(const GenericPointer &amp;rhs, Allocator *allocator=0)</argsstring>
                <name>GenericPointer</name>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;
                    </type>
                    <declname>rhs</declname>
                </param>
                <param>
                    <type>Allocator *</type>
                    <declname>allocator</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Copy constructor.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="168" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="168" bodyend="170"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" prot="public"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type></type>
                <definition>GenericPointer&lt; ValueType, Allocator &gt;::~GenericPointer</definition>
                <argsstring>()</argsstring>
                <name>~GenericPointer</name>
                <briefdescription>
                    <para>Destructor.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="173" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="173" bodyend="177"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" prot="public"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                    &amp;
                </type>
                <definition>GenericPointer&amp; GenericPointer&lt; ValueType, Allocator &gt;::operator=</definition>
                <argsstring>(const GenericPointer &amp;rhs)</argsstring>
                <name>operator=</name>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;
                    </type>
                    <declname>rhs</declname>
                </param>
                <briefdescription>
                    <para>Assignment operator.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="180" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="180" bodyend="198"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Append token</header>
            <memberdef kind="function" id="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <type>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                </type>
                <definition>GenericPointer GenericPointer&lt; ValueType, Allocator &gt;::Append</definition>
                <argsstring>(const Token &amp;token, Allocator *allocator=0) const</argsstring>
                <name>Append</name>
                <param>
                    <type>const <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> &amp;
                    </type>
                    <declname>token</declname>
                </param>
                <param>
                    <type>Allocator *</type>
                    <declname>allocator</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Append a token and return a new Pointer.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>token</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>
                                        <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                                        to be appended.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>allocator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Allocator for the newly return Pointer.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A new Pointer with appended token.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="211" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="211" bodyend="220"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a9f8a1711f5b8e0d951c25c6c65326f77" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <type>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                </type>
                <definition>GenericPointer GenericPointer&lt; ValueType, Allocator &gt;::Append</definition>
                <argsstring>(const Ch *name, SizeType length, Allocator *allocator=0) const</argsstring>
                <name>Append</name>
                <param>
                    <type>const <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">
                        Ch
                    </ref> *
                    </type>
                    <declname>name</declname>
                </param>
                <param>
                    <type>
                        <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                    </type>
                    <declname>length</declname>
                </param>
                <param>
                    <type>Allocator *</type>
                    <declname>allocator</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Append a name token with length, and return a new Pointer.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name to be appended.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>length</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of name.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>allocator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Allocator for the newly return Pointer.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A new Pointer with appended token.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="229" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="229" bodyend="232"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type></type>
                <definition>GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</definition>
                <argsstring>((internal::NotExpr&lt; internal::IsSame&lt; typename internal::RemoveConst&lt; T &gt;::Type,
                    Ch &gt; &gt;),(GenericPointer)) Append(T *name
                </argsstring>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
                <param>
                    <type>(internal::NotExpr&lt; internal::IsSame&lt; typename internal::RemoveConst&lt; T &gt;::<ref
                            refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>, <ref
                            refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch
                    </ref> &gt; &gt;)
                    </type>
                </param>
                <param>
                    <type>(<ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>)
                    </type>
                </param>
                <briefdescription>
                    <para>Append a name token without length, and return a new Pointer.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name (const Ch*) to be appended.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>allocator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Allocator for the newly return Pointer.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A new Pointer with appended token.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="241" column="1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Set a value</header>
            <memberdef kind="variable" id="class_generic_pointer_1a08ef35da0ea9a51d8265a360f0c34540" prot="public"
                       static="no" mutable="no">
                <type>T</type>
                <definition>T GenericPointer&lt; ValueType, Allocator &gt;::value</definition>
                <argsstring></argsstring>
                <name>value</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="637" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="637" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1ace82428d4ad958b05a52480d949b32fa" prot="public"
                       static="no" mutable="no">
                <type>T ValueType::AllocatorType &amp;allocator</type>
                <definition>T ValueType::AllocatorType&amp; allocator GenericPointer&lt; ValueType, Allocator &gt;::const</definition>
                <argsstring></argsstring>
                <name>const</name>
                <initializer>{
                    return Create(root, allocator) = ValueType(value).Move()
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="637" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="637" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1afd073c4e3be53fd7ec08aec9f75fbaa9" prot="public"
                       static="no" mutable="no">
                <type>stackAllocator &amp;</type>
                <definition>stackAllocator&amp; GenericPointer&lt; ValueType, Allocator &gt;::document</definition>
                <argsstring></argsstring>
                <name>document</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="673" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="673" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1abb1b141cfe93b7159842b5cad60d1be3" prot="public"
                       static="no" mutable="no">
                <type>stackAllocator T value</type>
                <definition>stackAllocator T value GenericPointer&lt; ValueType, Allocator &gt;::const</definition>
                <argsstring></argsstring>
                <name>const</name>
                <initializer>{
                    return Create(document) = value
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="673" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="673" bodyend="-1"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <type>ValueType &amp;</type>
                <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
                <argsstring>(ValueType &amp;root, ValueType &amp;value, typename ValueType::AllocatorType &amp;allocator)
                    const
                </argsstring>
                <name>Set</name>
                <param>
                    <type>ValueType &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename ValueType::AllocatorType &amp;</type>
                    <declname>allocator</declname>
                </param>
                <briefdescription>
                    <para>Set a value in a subtree, with move semantics.</para>
                </briefdescription>
                <detaileddescription>
                    <para>It creates all parents if they are not exist or types are different to the tokens. So this
                        function always succeeds but potentially remove existing values.
                    </para>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>root</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Root value of a DOM sub-tree to be resolved. It can be any value other than
                                        document root.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value to be set.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>allocator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Allocator for creating the values if the specified value or its parents are
                                        not exist.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="see">
                            <para>Create()</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="610" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="610" bodyend="612"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a61c0e9695cb0c96d465c8e1c21bd48fa" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <type>ValueType &amp;</type>
                <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
                <argsstring>(ValueType &amp;root, const ValueType &amp;value, typename ValueType::AllocatorType &amp;allocator)
                    const
                </argsstring>
                <name>Set</name>
                <param>
                    <type>ValueType &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename ValueType::AllocatorType &amp;</type>
                    <declname>allocator</declname>
                </param>
                <briefdescription>
                    <para>Set a value in a subtree, with copy semantics.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="615" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="615" bodyend="617"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a37ea2d2b205d3642d1e615b8b866666b" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <type>ValueType &amp;</type>
                <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
                <argsstring>(ValueType &amp;root, const Ch *value, typename ValueType::AllocatorType &amp;allocator)
                    const
                </argsstring>
                <name>Set</name>
                <param>
                    <type>ValueType &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">
                        Ch
                    </ref> *
                    </type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename ValueType::AllocatorType &amp;</type>
                    <declname>allocator</declname>
                </param>
                <briefdescription>
                    <para>Set a null-terminated string in a subtree.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="620" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="620" bodyend="622"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a914bbdd96e2a248e035b8ebd68526369" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type></type>
                <definition>GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</definition>
                <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, internal::IsGenericValue&lt; T &gt;
                    &gt;),(ValueType &amp;)) Set(ValueType &amp;root
                </argsstring>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
                <param>
                    <type>(internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, <ref
                            refid="structinternal_1_1_is_generic_value" kindref="compound">
                        internal::IsGenericValue</ref>&lt; T &gt; &gt;)
                    </type>
                </param>
                <param>
                    <type>(ValueType &amp;)</type>
                </param>
                <briefdescription>
                    <para>Set a primitive value in a subtree.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="templateparam">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>T</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Either <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7"
                                                      kindref="member">Type</ref>, <computeroutput>int</computeroutput>, <computeroutput>
                                        unsigned</computeroutput>, <computeroutput>
                                        int64_t</computeroutput>, <computeroutput>uint64_t</computeroutput>, <computeroutput>
                                        bool
                                    </computeroutput>
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="636" column="1"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1aeec3daf051dfa8b8fbf23ea4f9a238e4" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename stackAllocator</type>
                    </param>
                </templateparamlist>
                <type>ValueType &amp;</type>
                <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
                <argsstring>(GenericDocument&lt; EncodingType, typename ValueType::AllocatorType, stackAllocator &gt;
                    &amp;document, ValueType &amp;value) const
                </argsstring>
                <name>Set</name>
                <param>
                    <type><ref refid="class_generic_document" kindref="compound">GenericDocument</ref>&lt; <ref
                            refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">
                        EncodingType</ref>, typename ValueType::AllocatorType, stackAllocator &gt; &amp;
                    </type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                    <para>Set a value in a document, with move semantics.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="643" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="643" bodyend="645"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a8ed0a7ce95331b7433371df7150b84a9" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename stackAllocator</type>
                    </param>
                </templateparamlist>
                <type>ValueType &amp;</type>
                <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
                <argsstring>(GenericDocument&lt; EncodingType, typename ValueType::AllocatorType, stackAllocator &gt;
                    &amp;document, const ValueType &amp;value) const
                </argsstring>
                <name>Set</name>
                <param>
                    <type><ref refid="class_generic_document" kindref="compound">GenericDocument</ref>&lt; <ref
                            refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">
                        EncodingType</ref>, typename ValueType::AllocatorType, stackAllocator &gt; &amp;
                    </type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                    <para>Set a value in a document, with copy semantics.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="649" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="649" bodyend="651"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1abaa0cda4ed84a4435871d355279bab8e" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename stackAllocator</type>
                    </param>
                </templateparamlist>
                <type>ValueType &amp;</type>
                <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
                <argsstring>(GenericDocument&lt; EncodingType, typename ValueType::AllocatorType, stackAllocator &gt;
                    &amp;document, const Ch *value) const
                </argsstring>
                <name>Set</name>
                <param>
                    <type><ref refid="class_generic_document" kindref="compound">GenericDocument</ref>&lt; <ref
                            refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">
                        EncodingType</ref>, typename ValueType::AllocatorType, stackAllocator &gt; &amp;
                    </type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">
                        Ch
                    </ref> *
                    </type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                    <para>Set a null-terminated string in a document.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="655" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="655" bodyend="657"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a1bb4a253f33687734e5b20795632a801" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename stackAllocator</type>
                    </param>
                </templateparamlist>
                <type></type>
                <definition>GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</definition>
                <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, internal::IsGenericValue&lt; T &gt;
                    &gt;),(ValueType &amp;)) Set(GenericDocument&lt; EncodingType
                </argsstring>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
                <param>
                    <type>(internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, <ref
                            refid="structinternal_1_1_is_generic_value" kindref="compound">
                        internal::IsGenericValue</ref>&lt; T &gt; &gt;)
                    </type>
                </param>
                <param>
                    <type>(ValueType &amp;)</type>
                </param>
                <briefdescription>
                    <para>Set a primitive value in a document.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="templateparam">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>T</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Either <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7"
                                                      kindref="member">Type</ref>, <computeroutput>int</computeroutput>, <computeroutput>
                                        unsigned</computeroutput>, <computeroutput>
                                        int64_t</computeroutput>, <computeroutput>uint64_t</computeroutput>, <computeroutput>
                                        bool
                                    </computeroutput>
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="672" column="1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Swap a value</header>
            <memberdef kind="function" id="class_generic_pointer_1a3b40ad3e851640e295a4623b624af395" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <type>ValueType &amp;</type>
                <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Swap</definition>
                <argsstring>(ValueType &amp;root, ValueType &amp;value, typename ValueType::AllocatorType &amp;allocator)
                    const
                </argsstring>
                <name>Swap</name>
                <param>
                    <type>ValueType &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename ValueType::AllocatorType &amp;</type>
                    <declname>allocator</declname>
                </param>
                <briefdescription>
                    <para>Swap a value with a value in a subtree.</para>
                </briefdescription>
                <detaileddescription>
                    <para>It creates all parents if they are not exist or types are different to the tokens. So this
                        function always succeeds but potentially remove existing values.
                    </para>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>root</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Root value of a DOM sub-tree to be resolved. It can be any value other than
                                        document root.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value to be swapped.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>allocator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Allocator for creating the values if the specified value or its parents are
                                        not exist.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="see">
                            <para>Create()</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="692" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="692" bodyend="694"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1aa84bc7e016c906436f464c8cbd858edb" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename stackAllocator</type>
                    </param>
                </templateparamlist>
                <type>ValueType &amp;</type>
                <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Swap</definition>
                <argsstring>(GenericDocument&lt; EncodingType, typename ValueType::AllocatorType, stackAllocator &gt;
                    &amp;document, ValueType &amp;value) const
                </argsstring>
                <name>Swap</name>
                <param>
                    <type><ref refid="class_generic_document" kindref="compound">GenericDocument</ref>&lt; <ref
                            refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">
                        EncodingType</ref>, typename ValueType::AllocatorType, stackAllocator &gt; &amp;
                    </type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                    <para>Swap a value with a value in a document.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="698" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="698" bodyend="700"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-type">
            <memberdef kind="typedef" id="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" prot="public"
                       static="no">
                <type>ValueType::EncodingType</type>
                <definition>typedef ValueType::EncodingType GenericPointer&lt; ValueType, Allocator &gt;::EncodingType
                </definition>
                <argsstring></argsstring>
                <name>EncodingType</name>
                <briefdescription>
                    <para>Encoding type from Value.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="83" column="1" bodyfile="rapidjson/pointer.h" bodystart="83"
                          bodyend="-1"/>
            </memberdef>
            <memberdef kind="typedef" id="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" prot="public"
                       static="no">
                <type>ValueType::Ch</type>
                <definition>typedef ValueType::Ch GenericPointer&lt; ValueType, Allocator &gt;::Ch</definition>
                <argsstring></argsstring>
                <name>Ch</name>
                <briefdescription>
                    <para>Character type from Value.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="84" column="1" bodyfile="rapidjson/pointer.h" bodystart="84"
                          bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-attrib">
            <memberdef kind="variable" id="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" prot="public"
                       static="no" mutable="no">
                <type>Allocator *</type>
                <definition>Allocator* GenericPointer&lt; ValueType, Allocator &gt;::allocator</definition>
                <argsstring></argsstring>
                <name>allocator</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="242" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="242" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1a646e2825228e0d8331e3a49d7382202b" prot="public"
                       static="no" mutable="no">
                <type>Allocator stackAllocator stackAllocator &amp;</type>
                <definition>Allocator stackAllocator stackAllocator&amp; GenericPointer&lt; ValueType, Allocator &gt;::document</definition>
                <argsstring></argsstring>
                <name>document</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="591" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="591" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" prot="public"
                       static="no" mutable="no">
                <type>Allocator stackAllocator stackAllocator T defaultValue</type>
                <definition>Allocator stackAllocator stackAllocator T defaultValue GenericPointer&lt; ValueType,
                    Allocator &gt;::const
                </definition>
                <argsstring></argsstring>
                <name>const</name>
                <initializer>{
                    return GetWithDefault(document, defaultValue, document.GetAllocator())
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="591" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="591" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="private-attrib">
            <memberdef kind="variable" id="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" prot="private"
                       static="no" mutable="no">
                <type>Allocator *</type>
                <definition>Allocator* GenericPointer&lt; ValueType, Allocator &gt;::allocator_</definition>
                <argsstring></argsstring>
                <name>allocator_</name>
                <briefdescription>
                    <para>The current allocator. It is either user-supplied or equal to ownAllocator_.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1039" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1039" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" prot="private"
                       static="no" mutable="no">
                <type>Allocator *</type>
                <definition>Allocator* GenericPointer&lt; ValueType, Allocator &gt;::ownAllocator_</definition>
                <argsstring></argsstring>
                <name>ownAllocator_</name>
                <briefdescription>
                    <para>Allocator owned by this Pointer.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1040" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1040" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" prot="private"
                       static="no" mutable="no">
                <type>
                    <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>
                    *
                </type>
                <definition>Ch* GenericPointer&lt; ValueType, Allocator &gt;::nameBuffer_</definition>
                <argsstring></argsstring>
                <name>nameBuffer_</name>
                <briefdescription>
                    <para>A buffer containing all names in tokens.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1041" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1041" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" prot="private"
                       static="no" mutable="no">
                <type>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    *
                </type>
                <definition>Token* GenericPointer&lt; ValueType, Allocator &gt;::tokens_</definition>
                <argsstring></argsstring>
                <name>tokens_</name>
                <briefdescription>
                    <para>A list of tokens.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1042" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1042" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" prot="private"
                       static="no" mutable="no">
                <type>size_t</type>
                <definition>size_t GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</definition>
                <argsstring></argsstring>
                <name>tokenCount_</name>
                <briefdescription>
                    <para>Number of tokens in tokens_.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1043" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1043" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" prot="private"
                       static="no" mutable="no">
                <type>size_t</type>
                <definition>size_t GenericPointer&lt; ValueType, Allocator &gt;::parseErrorOffset_</definition>
                <argsstring></argsstring>
                <name>parseErrorOffset_</name>
                <briefdescription>
                    <para>Offset in code unit when parsing fail.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1044" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1044" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" prot="private"
                       static="no" mutable="no">
                <type>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be"
                         kindref="member">PointerParseErrorCode
                    </ref>
                </type>
                <definition>PointerParseErrorCode GenericPointer&lt; ValueType, Allocator &gt;::parseErrorCode_
                </definition>
                <argsstring></argsstring>
                <name>parseErrorCode_</name>
                <briefdescription>
                    <para>Parsing error code.</para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1045" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1045" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-func">
            <memberdef kind="function" id="class_generic_pointer_1aebf325c6fde06adfc4d959b507d7f170" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>Allocator stackAllocator</type>
                <definition>Allocator stackAllocator GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</definition>
                <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, internal::IsGenericValue&lt; T &gt;
                    &gt;),(ValueType &amp;)) GetWithDefault(GenericDocument&lt; EncodingType
                </argsstring>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
                <param>
                    <type>(internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, <ref
                            refid="structinternal_1_1_is_generic_value" kindref="compound">
                        internal::IsGenericValue</ref>&lt; T &gt; &gt;)
                    </type>
                </param>
                <param>
                    <type>(ValueType &amp;)</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="590" column="1"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a759c07e81c9738e7a2a68b36d5c28643" prot="public"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <type>bool</type>
                <definition>bool GenericPointer&lt; ValueType, Allocator &gt;::Erase</definition>
                <argsstring>(ValueType &amp;root) const</argsstring>
                <name>Erase</name>
                <param>
                    <type>ValueType &amp;</type>
                    <declname>root</declname>
                </param>
                <briefdescription>
                    <para>Erase a value in a subtree.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>root</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Root value of a DOM sub-tree to be resolved. It can be any value other than
                                        document root.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Whether the resolved value is found and erased.</para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>Erasing with an empty pointer <computeroutput>Pointer</computeroutput>(&quot;&quot;),
                                i.e. the root, always fail and return false.
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="711" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="711" bodyend="749"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="private-func">
            <memberdef kind="function" id="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" prot="private"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type>
                    <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>
                    *
                </type>
                <definition>Ch* GenericPointer&lt; ValueType, Allocator &gt;::CopyFromRaw</definition>
                <argsstring>(const GenericPointer &amp;rhs, size_t extraToken=0, size_t extraNameBufferSize=0)
                </argsstring>
                <name>CopyFromRaw</name>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;
                    </type>
                    <declname>rhs</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>extraToken</declname>
                    <defval>0</defval>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>extraNameBufferSize</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Clone the content from rhs to this.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>rhs</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Source pointer.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>extraToken</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Extra tokens to be allocated.</para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>extraNameBufferSize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Extra name buffer size (in number of Ch) to be allocated.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Start of non-occupied name buffer, for storing extra names.</para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="759" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="759" bodyend="783"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a7c5be92bf67c6e9fd983577fc6047314" prot="private"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <type>bool</type>
                <definition>bool GenericPointer&lt; ValueType, Allocator &gt;::NeedPercentEncode</definition>
                <argsstring>(Ch c) const</argsstring>
                <name>NeedPercentEncode</name>
                <param>
                    <type>
                        <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>
                    </type>
                    <declname>c</declname>
                </param>
                <briefdescription>
                    <para>Check whether a character should be percent-encoded.</para>
                </briefdescription>
                <detaileddescription>
                    <para>According to RFC 3986 2.3 Unreserved Characters.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>c</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The character (code unit) to be tested.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="790" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="790" bodyend="792"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" prot="private"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type>void</type>
                <definition>void GenericPointer&lt; ValueType, Allocator &gt;::Parse</definition>
                <argsstring>(const Ch *source, size_t length)</argsstring>
                <name>Parse</name>
                <param>
                    <type>const <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">
                        Ch
                    </ref> *
                    </type>
                    <declname>source</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>length</declname>
                </param>
                <briefdescription>
                    <para>Parse a JSON String or its URI fragment representation into tokens.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>source</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Either a JSON Pointer string, or its URI fragment representation. Not need to
                                        be null terminated.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>length</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the source string.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>Source cannot be JSON String Representation of JSON Pointer, e.g. In &quot;/\u0000&quot;,
                                will not be unescaped.
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="802" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="802" bodyend="932"/>
            </memberdef>
            <memberdef kind="function" id="class_generic_pointer_1a0ab2465212dd57d2badeac5fe4a5f853" prot="private"
                       static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>bool</type>
                        <declname>uriFragment</declname>
                        <defname>uriFragment</defname>
                    </param>
                    <param>
                        <type>typename OutputStream</type>
                    </param>
                </templateparamlist>
                <type>bool</type>
                <definition>bool GenericPointer&lt; ValueType, Allocator &gt;::Stringify</definition>
                <argsstring>(OutputStream &amp;os) const</argsstring>
                <name>Stringify</name>
                <param>
                    <type>OutputStream &amp;</type>
                    <declname>os</declname>
                </param>
                <briefdescription>
                    <para>Stringify to string or URI fragment representation.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="templateparam">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>uriFragment</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>True for stringifying to URI fragment representation. False for string
                                        representation.
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>OutputStream</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>type of output stream.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>os</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The output stream.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="941" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="941" bodyend="972"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Represents a JSON Pointer. Use Pointer for <ref refid="struct_u_t_f8" kindref="compound">UTF8</ref> encoding
                and default allocator.
            </para>
        </briefdescription>
        <detaileddescription>
            <para>This class implements RFC 6901 &quot;JavaScript Object Notation (JSON) Pointer&quot; (<ulink
                    url="https://tools.ietf.org/html/rfc6901">https://tools.ietf.org/html/rfc6901</ulink>).
            </para>
            <para>A JSON pointer is for identifying a specific value in a JSON document (<ref
                    refid="class_generic_document" kindref="compound">GenericDocument</ref>). It can simplify coding of
                DOM tree manipulation, because it can access multiple-level depth of DOM tree with single API call.
            </para>
            <para>After it parses a string representation (e.g. &quot;/foo/0&quot; or URI fragment representation (e.g.
                &quot;#/foo/0&quot;) into its internal representation (tokens), it can be used to resolve a specific
                value in multiple documents, or sub-tree of documents.
            </para>
            <para>Contrary to <ref refid="class_generic_value" kindref="compound">GenericValue</ref>, Pointer can be
                copy constructed and copy assigned. Apart from assignment, a Pointer cannot be modified after
                construction.
            </para>
            <para>Although Pointer is very convenient, please aware that constructing Pointer involves parsing and
                dynamic memory allocation. A special constructor with user- supplied tokens eliminates these.
            </para>
            <para>
                <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                depends on <ref refid="class_generic_document" kindref="compound">GenericDocument</ref> and <ref
                    refid="class_generic_value" kindref="compound">GenericValue</ref>.
            </para>
            <para>
                <parameterlist kind="templateparam">
                    <parameteritem>
                        <parameternamelist>
                            <parametername>ValueType</parametername>
                        </parameternamelist>
                        <parameterdescription>
                            <para>The value type of the DOM tree. E.g. <ref refid="class_generic_value"
                                                                            kindref="compound">GenericValue</ref>&lt;UTF8&lt;&gt;
                                &gt;
                            </para>
                        </parameterdescription>
                    </parameteritem>
                    <parameteritem>
                        <parameternamelist>
                            <parametername>Allocator</parametername>
                        </parameternamelist>
                        <parameterdescription>
                            <para>The allocator type for allocating memory for internal representation.</para>
                        </parameterdescription>
                    </parameteritem>
                </parameterlist>
                <simplesect kind="note">
                    <para>
                        <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                        uses same encoding of ValueType. However, Allocator of <ref refid="class_generic_pointer"
                                                                                    kindref="compound">GenericPointer
                    </ref> is independent of Allocator of Value.
                    </para>
                </simplesect>
            </para>
        </detaileddescription>
        <location file="rapidjson/fwd.h" line="126" column="1" bodyfile="rapidjson/fwd.h" bodystart="126" bodyend="-1"/>
        <listofallmembers>
            <member refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>allocator</name>
            </member>
            <member refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>allocator_</name>
            </member>
            <member refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Append</name>
            </member>
            <member refid="class_generic_pointer_1a9f8a1711f5b8e0d951c25c6c65326f77" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Append</name>
            </member>
            <member refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Ch</name>
            </member>
            <member refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>const</name>
            </member>
            <member refid="class_generic_pointer_1ace82428d4ad958b05a52480d949b32fa" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>const</name>
            </member>
            <member refid="class_generic_pointer_1abb1b141cfe93b7159842b5cad60d1be3" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>const</name>
            </member>
            <member refid="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>CopyFromRaw</name>
            </member>
            <member refid="class_generic_pointer_1a646e2825228e0d8331e3a49d7382202b" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>document</name>
            </member>
            <member refid="class_generic_pointer_1afd073c4e3be53fd7ec08aec9f75fbaa9" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>document</name>
            </member>
            <member refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>EncodingType</name>
            </member>
            <member refid="class_generic_pointer_1a759c07e81c9738e7a2a68b36d5c28643" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Erase</name>
            </member>
            <member refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>GenericPointer</name>
            </member>
            <member refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>GenericPointer</name>
            </member>
            <member refid="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>GenericPointer</name>
            </member>
            <member refid="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>GenericPointer</name>
            </member>
            <member refid="class_generic_pointer_1a18d671bb793c6b843d5496b2b130cb70" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>GenericPointer</name>
            </member>
            <member refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>nameBuffer_</name>
            </member>
            <member refid="class_generic_pointer_1a7c5be92bf67c6e9fd983577fc6047314" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>NeedPercentEncode</name>
            </member>
            <member refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>operator=</name>
            </member>
            <member refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>ownAllocator_</name>
            </member>
            <member refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Parse</name>
            </member>
            <member refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>parseErrorCode_</name>
            </member>
            <member refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>parseErrorOffset_</name>
            </member>
            <member refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
            </member>
            <member refid="class_generic_pointer_1aebf325c6fde06adfc4d959b507d7f170" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
            </member>
            <member refid="class_generic_pointer_1a914bbdd96e2a248e035b8ebd68526369" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
            </member>
            <member refid="class_generic_pointer_1a1bb4a253f33687734e5b20795632a801" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
            </member>
            <member refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Set</name>
            </member>
            <member refid="class_generic_pointer_1a61c0e9695cb0c96d465c8e1c21bd48fa" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Set</name>
            </member>
            <member refid="class_generic_pointer_1a37ea2d2b205d3642d1e615b8b866666b" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Set</name>
            </member>
            <member refid="class_generic_pointer_1aeec3daf051dfa8b8fbf23ea4f9a238e4" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Set</name>
            </member>
            <member refid="class_generic_pointer_1a8ed0a7ce95331b7433371df7150b84a9" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Set</name>
            </member>
            <member refid="class_generic_pointer_1abaa0cda4ed84a4435871d355279bab8e" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Set</name>
            </member>
            <member refid="class_generic_pointer_1a0ab2465212dd57d2badeac5fe4a5f853" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Stringify</name>
            </member>
            <member refid="class_generic_pointer_1a3b40ad3e851640e295a4623b624af395" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Swap</name>
            </member>
            <member refid="class_generic_pointer_1aa84bc7e016c906436f464c8cbd858edb" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>Swap</name>
            </member>
            <member refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>tokenCount_</name>
            </member>
            <member refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" prot="private" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>tokens_</name>
            </member>
            <member refid="class_generic_pointer_1a08ef35da0ea9a51d8265a360f0c34540" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>value</name>
            </member>
            <member refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" prot="public" virt="non-virtual">
                <scope>GenericPointer</scope>
                <name>~GenericPointer</name>
            </member>
        </listofallmembers>
    </compounddef>
</doxygen>
