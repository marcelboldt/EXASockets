<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.8.12">
    <compounddef id="pointer_8h" kind="file" language="C++">
        <compoundname>pointer.h</compoundname>
        <includes refid="document_8h" local="yes">document.h</includes>
        <includes refid="itoa_8h" local="yes">internal/itoa.h</includes>
        <includedby refid="schema_8h" local="yes">rapidjson/schema.h</includedby>
        <incdepgraph>
            <node id="515">
                <label>internal/strfunc.h</label>
                <link refid="strfunc_8h_source"/>
                <childnode refid="501" relation="include">
                </childnode>
            </node>
            <node id="513">
                <label>limits</label>
            </node>
            <node id="517">
                <label>iterator</label>
            </node>
            <node id="493">
                <label>rapidjson/pointer.h</label>
                <link refid="pointer_8h"/>
                <childnode refid="494" relation="include">
                </childnode>
                <childnode refid="518" relation="include">
                </childnode>
            </node>
            <node id="518">
                <label>internal/itoa.h</label>
                <link refid="itoa_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="514">
                <label>error/error.h</label>
                <link refid="error_8h"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="500">
                <label>cassert</label>
            </node>
            <node id="507">
                <label>swap.h</label>
                <link refid="swap_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="502">
                <label>encodings.h</label>
                <link refid="encodings_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="512">
                <label>pow10.h</label>
                <link refid="pow10_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="511">
                <label>diyfp.h</label>
                <link refid="diyfp_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="510">
                <label>biginteger.h</label>
                <link refid="biginteger_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="495">
                <label>reader.h</label>
                <link refid="reader_8h"/>
                <childnode refid="496" relation="include">
                </childnode>
                <childnode refid="501" relation="include">
                </childnode>
                <childnode refid="503" relation="include">
                </childnode>
                <childnode refid="505" relation="include">
                </childnode>
                <childnode refid="506" relation="include">
                </childnode>
                <childnode refid="508" relation="include">
                </childnode>
                <childnode refid="513" relation="include">
                </childnode>
                <childnode refid="514" relation="include">
                </childnode>
            </node>
            <node id="501">
                <label>stream.h</label>
                <link refid="stream_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
                <childnode refid="502" relation="include">
                </childnode>
            </node>
            <node id="497">
                <label>rapidjson.h</label>
                <link refid="rapidjson_8h"/>
                <childnode refid="498" relation="include">
                </childnode>
                <childnode refid="499" relation="include">
                </childnode>
                <childnode refid="500" relation="include">
                </childnode>
            </node>
            <node id="503">
                <label>encodedstream.h</label>
                <link refid="encodedstream_8h_source"/>
                <childnode refid="501" relation="include">
                </childnode>
                <childnode refid="504" relation="include">
                </childnode>
            </node>
            <node id="509">
                <label>ieee754.h</label>
                <link refid="ieee754_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="506">
                <label>internal/stack.h</label>
                <link refid="stack_8h_source"/>
                <childnode refid="496" relation="include">
                </childnode>
                <childnode refid="507" relation="include">
                </childnode>
            </node>
            <node id="516">
                <label>new</label>
            </node>
            <node id="498">
                <label>cstdlib</label>
            </node>
            <node id="505">
                <label>internal/meta.h</label>
                <link refid="meta_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="504">
                <label>memorystream.h</label>
                <link refid="memorystream_8h_source"/>
                <childnode refid="501" relation="include">
                </childnode>
            </node>
            <node id="496">
                <label>allocators.h</label>
                <link refid="allocators_8h_source"/>
                <childnode refid="497" relation="include">
                </childnode>
            </node>
            <node id="508">
                <label>internal/strtod.h</label>
                <link refid="strtod_8h_source"/>
                <childnode refid="509" relation="include">
                </childnode>
                <childnode refid="510" relation="include">
                </childnode>
                <childnode refid="511" relation="include">
                </childnode>
                <childnode refid="512" relation="include">
                </childnode>
            </node>
            <node id="499">
                <label>cstring</label>
            </node>
            <node id="494">
                <label>document.h</label>
                <link refid="document_8h"/>
                <childnode refid="495" relation="include">
                </childnode>
                <childnode refid="505" relation="include">
                </childnode>
                <childnode refid="515" relation="include">
                </childnode>
                <childnode refid="504" relation="include">
                </childnode>
                <childnode refid="503" relation="include">
                </childnode>
                <childnode refid="516" relation="include">
                </childnode>
                <childnode refid="513" relation="include">
                </childnode>
                <childnode refid="517" relation="include">
                </childnode>
            </node>
        </incdepgraph>
        <invincdepgraph>
            <node id="519">
                <label>rapidjson/pointer.h</label>
                <link refid="pointer_8h"/>
                <childnode refid="520" relation="include">
                </childnode>
            </node>
            <node id="520">
                <label>rapidjson/schema.h</label>
                <link refid="schema_8h_source"/>
            </node>
        </invincdepgraph>
        <innerclass refid="class_generic_pointer" prot="public">GenericPointer</innerclass>
        <innerclass refid="struct_generic_pointer_1_1_token" prot="public">GenericPointer::Token</innerclass>
        <innerclass refid="class_generic_pointer_1_1_percent_decode_stream" prot="private">
            GenericPointer::PercentDecodeStream
        </innerclass>
        <innerclass refid="class_generic_pointer_1_1_percent_encode_stream" prot="private">
            GenericPointer::PercentEncodeStream
        </innerclass>
        <sectiondef kind="user-defined">
            <header>Helper functions for GenericPointer</header>
            <memberdef kind="variable" id="pointer_8h_1aae1f8d263916ad71bd415381591549c0" prot="public" static="no"
                       mutable="no">
                <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                    T::ValueType &gt; &amp;
                </type>
                <definition>const GenericPointer&lt; typename DocumentType::ValueType &gt; &amp; pointer</definition>
                <argsstring></argsstring>
                <name>pointer</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1121" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1121" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" prot="public" static="no"
                       mutable="no">
                <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                    T::ValueType &gt; T2
                </type>
                <definition>const GenericPointer&lt; typename DocumentType::ValueType &gt; T2 defaultValue</definition>
                <argsstring></argsstring>
                <name>defaultValue</name>
                <initializer>{
                    return pointer.GetWithDefault(document, defaultValue)
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1121" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1121" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" prot="public" static="no"
                       mutable="no">
                <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                    T::ValueType &gt; T2 T::AllocatorType &amp;
                </type>
                <definition>const GenericPointer&lt; typename T::ValueType &gt; T2 T::AllocatorType &amp; a</definition>
                <argsstring></argsstring>
                <name>a</name>
                <initializer>{
                    return pointer.GetWithDefault(root, defaultValue, a)
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1121" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1121" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" prot="public" static="no"
                       mutable="no">
                <type>const CharType(&amp;</type>
                <definition>const CharType(&amp; source</definition>
                <argsstring>)[N]</argsstring>
                <name>source</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1144" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1144" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" prot="public" static="no"
                       mutable="no">
                <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                    T::ValueType &gt; T2
                </type>
                <definition>const GenericPointer&lt; typename DocumentType::ValueType &gt; T2 value</definition>
                <argsstring></argsstring>
                <name>value</name>
                <initializer>{
                    return pointer.Set(document, value)
                </initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1222" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1222" bodyend="-1"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ae41c1042b9be4c186602c2897b5fdbdf" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; CreateValueByPointer</definition>
                <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, typename
                    T::AllocatorType &amp;a)
                </argsstring>
                <name>CreateValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1057" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1057" bodyend="1059"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a323f8433d926687f9b419ed8d2934134" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; CreateValueByPointer</definition>
                <argsstring>(T &amp;root, const CharType(&amp;source)[N], typename T::AllocatorType &amp;a)</argsstring>
                <name>CreateValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1062" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1062" bodyend="1064"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ad434765502c2bc0ea1c3a0cc8aae673f" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; CreateValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt;
                    &amp;pointer)
                </argsstring>
                <name>CreateValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        DocumentType::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1069" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1069" bodyend="1071"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a6e5b738d292926181efc3e30c984d237" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; CreateValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N])</argsstring>
                <name>CreateValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1074" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1074" bodyend="1076"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a1e559ded8870c654585e81cc14ad5fd1" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>T::ValueType *</type>
                <definition>T::ValueType* GetValueByPointer</definition>
                <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, size_t
                    *unresolvedTokenIndex=0)
                </argsstring>
                <name>GetValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>size_t *</type>
                    <declname>unresolvedTokenIndex</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1081" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1081" bodyend="1083"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ad50af7c9c5b198424364d6aa891e9c0a" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>const T::ValueType *</type>
                <definition>const T::ValueType* GetValueByPointer</definition>
                <argsstring>(const T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, size_t
                    *unresolvedTokenIndex=0)
                </argsstring>
                <name>GetValueByPointer</name>
                <param>
                    <type>const T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>size_t *</type>
                    <declname>unresolvedTokenIndex</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1086" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1086" bodyend="1088"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a43e80e7041df318d9f03a7a63d110d18" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>T::ValueType *</type>
                <definition>T::ValueType* GetValueByPointer</definition>
                <argsstring>(T &amp;root, const CharType(&amp;source)[N], size_t *unresolvedTokenIndex=0)</argsstring>
                <name>GetValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>size_t *</type>
                    <declname>unresolvedTokenIndex</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1091" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1091" bodyend="1093"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a32e8b30fe748f050f18e1df4dbcd332c" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>const T::ValueType *</type>
                <definition>const T::ValueType* GetValueByPointer</definition>
                <argsstring>(const T &amp;root, const CharType(&amp;source)[N], size_t *unresolvedTokenIndex=0)
                </argsstring>
                <name>GetValueByPointer</name>
                <param>
                    <type>const T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>size_t *</type>
                    <declname>unresolvedTokenIndex</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1096" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1096" bodyend="1098"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a2cc18e41ec5f1c066b7232ce8cbff6ac" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; GetValueByPointerWithDefault</definition>
                <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, const
                    typename T::ValueType &amp;defaultValue, typename T::AllocatorType &amp;a)
                </argsstring>
                <name>GetValueByPointerWithDefault</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>const typename T::ValueType &amp;</type>
                    <declname>defaultValue</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1103" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1103" bodyend="1105"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a99418d6515d00c0203400d1412edb837" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; GetValueByPointerWithDefault</definition>
                <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, const
                    typename T::Ch *defaultValue, typename T::AllocatorType &amp;a)
                </argsstring>
                <name>GetValueByPointerWithDefault</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>const typename T::Ch *</type>
                    <declname>defaultValue</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1108" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1108" bodyend="1110"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename T2</type>
                    </param>
                </templateparamlist>
                <type></type>
                <definition>RAPIDJSON_DISABLEIF_RETURN</definition>
                <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, internal::IsGenericValue&lt; T2 &gt;
                    &gt;),(typename T::ValueType &amp;)) GetValueByPointerWithDefault(T &amp;root
                </argsstring>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
                <param>
                    <type>(internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <ref
                            refid="structinternal_1_1_is_generic_value" kindref="compound">
                        internal::IsGenericValue</ref>&lt; T2 &gt; &gt;)
                    </type>
                </param>
                <param>
                    <type>(typename T::ValueType &amp;)</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1120" column="1"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ad7cc5d0abc618c9ff836dbc864e0ca85" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; GetValueByPointerWithDefault</definition>
                <argsstring>(T &amp;root, const CharType(&amp;source)[N], const typename T::ValueType &amp;defaultValue,
                    typename T::AllocatorType &amp;a)
                </argsstring>
                <name>GetValueByPointerWithDefault</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>const typename T::ValueType &amp;</type>
                    <declname>defaultValue</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1126" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1126" bodyend="1128"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a422a05f4a2304cdfa4601c14a60b4c4a" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; GetValueByPointerWithDefault</definition>
                <argsstring>(T &amp;root, const CharType(&amp;source)[N], const typename T::Ch *defaultValue, typename
                    T::AllocatorType &amp;a)
                </argsstring>
                <name>GetValueByPointerWithDefault</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>const typename T::Ch *</type>
                    <declname>defaultValue</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1131" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1131" bodyend="1133"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ae26d117fc2f0ef0275825d2a510e8a8d" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                    <param>
                        <type>typename T2</type>
                    </param>
                </templateparamlist>
                <type></type>
                <definition>RAPIDJSON_DISABLEIF_RETURN</definition>
                <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, internal::IsGenericValue&lt; T2 &gt;
                    &gt;),(typename T::ValueType &amp;)) GetValueByPointerWithDefault(T &amp;root
                </argsstring>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
                <param>
                    <type>(internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <ref
                            refid="structinternal_1_1_is_generic_value" kindref="compound">
                        internal::IsGenericValue</ref>&lt; T2 &gt; &gt;)
                    </type>
                </param>
                <param>
                    <type>(typename T::ValueType &amp;)</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1143" column="1"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1aa31fe0b162fa72462c210f665810bf58" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; GetValueByPointerWithDefault</definition>
                <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt;
                    &amp;pointer, const typename DocumentType::ValueType &amp;defaultValue)
                </argsstring>
                <name>GetValueByPointerWithDefault</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        DocumentType::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>const typename DocumentType::ValueType &amp;</type>
                    <declname>defaultValue</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1151" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1151" bodyend="1153"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ae443f6e53f23e8a4b7faa1b0ce3f6bcb" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; GetValueByPointerWithDefault</definition>
                <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt;
                    &amp;pointer, const typename DocumentType::Ch *defaultValue)
                </argsstring>
                <name>GetValueByPointerWithDefault</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        DocumentType::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>const typename DocumentType::Ch *</type>
                    <declname>defaultValue</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1156" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1156" bodyend="1158"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a409f561a9f9a793f7032b50536f8c526" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                    <param>
                        <type>typename T2</type>
                    </param>
                </templateparamlist>
                <type></type>
                <definition>RAPIDJSON_DISABLEIF_RETURN</definition>
                <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, internal::IsGenericValue&lt; T2 &gt;
                    &gt;),(typename DocumentType::ValueType &amp;)) GetValueByPointerWithDefault(DocumentType &amp;document
                </argsstring>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
                <param>
                    <type>(internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <ref
                            refid="structinternal_1_1_is_generic_value" kindref="compound">
                        internal::IsGenericValue</ref>&lt; T2 &gt; &gt;)
                    </type>
                </param>
                <param>
                    <type>(typename DocumentType::ValueType &amp;)</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1168" column="1"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a8dfe556d6a1769e738ec0c1124b8f7b1" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; GetValueByPointerWithDefault</definition>
                <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], const typename
                    DocumentType::ValueType &amp;defaultValue)
                </argsstring>
                <name>GetValueByPointerWithDefault</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>const typename DocumentType::ValueType &amp;</type>
                    <declname>defaultValue</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1174" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1174" bodyend="1176"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1af153334e7dd7362ac11c63a0b18a058b" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; GetValueByPointerWithDefault</definition>
                <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], const typename DocumentType::Ch
                    *defaultValue)
                </argsstring>
                <name>GetValueByPointerWithDefault</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>const typename DocumentType::Ch *</type>
                    <declname>defaultValue</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1179" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1179" bodyend="1181"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1aaaf14202ae851a7d3c3db56789b9eab4" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                    <param>
                        <type>typename T2</type>
                    </param>
                </templateparamlist>
                <type></type>
                <definition>RAPIDJSON_DISABLEIF_RETURN</definition>
                <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, internal::IsGenericValue&lt; T2 &gt;
                    &gt;),(typename DocumentType::ValueType &amp;)) GetValueByPointerWithDefault(DocumentType &amp;document
                </argsstring>
                <name>RAPIDJSON_DISABLEIF_RETURN</name>
                <param>
                    <type>(internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <ref
                            refid="structinternal_1_1_is_generic_value" kindref="compound">
                        internal::IsGenericValue</ref>&lt; T2 &gt; &gt;)
                    </type>
                </param>
                <param>
                    <type>(typename DocumentType::ValueType &amp;)</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1191" column="1"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1aa1a07d61994bc13f68535428be4bbe66" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, typename
                    T::ValueType &amp;value, typename T::AllocatorType &amp;a)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>typename T::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1199" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1199" bodyend="1201"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ab0bf48c8106528f109a46d6255f124af" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, const
                    typename T::ValueType &amp;value, typename T::AllocatorType &amp;a)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>const typename T::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1204" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1204" bodyend="1206"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ae96ce29de67839434baa923594ec6aaa" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, const
                    typename T::Ch *value, typename T::AllocatorType &amp;a)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>const typename T::Ch *</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1209" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1209" bodyend="1211"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1aad8f686395fd07356de7f1702a431364" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(T &amp;root, const CharType(&amp;source)[N], typename T::ValueType &amp;value, typename
                    T::AllocatorType &amp;a)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>typename T::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1227" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1227" bodyend="1229"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ad9844eb220fe8d5f72b21733f5449e3b" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(T &amp;root, const CharType(&amp;source)[N], const typename T::ValueType &amp;value,
                    typename T::AllocatorType &amp;a)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>const typename T::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1232" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1232" bodyend="1234"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a0fb8e67f2ea5e8686b9789a9ee9ac3be" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(T &amp;root, const CharType(&amp;source)[N], const typename T::Ch *value, typename
                    T::AllocatorType &amp;a)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>const typename T::Ch *</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1237" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1237" bodyend="1239"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a982d904d972f315489bb073cc07019a6" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt;
                    &amp;pointer, typename DocumentType::ValueType &amp;value)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        DocumentType::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>typename DocumentType::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1257" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1257" bodyend="1259"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1af09dfbe3867fb347ae84def5e9ef8f0b" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt;
                    &amp;pointer, const typename DocumentType::ValueType &amp;value)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        DocumentType::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>const typename DocumentType::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1262" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1262" bodyend="1264"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1aea4f305226fd159c476622da44b61017" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt;
                    &amp;pointer, const typename DocumentType::Ch *value)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        DocumentType::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>const typename DocumentType::Ch *</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1267" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1267" bodyend="1269"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ae3c0682773c57a6fe510f3d4a0969ccf" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], typename
                    DocumentType::ValueType &amp;value)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>typename DocumentType::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1285" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1285" bodyend="1287"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a086615f683607c07c43ede651bc2935e" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], const typename
                    DocumentType::ValueType &amp;value)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>const typename DocumentType::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1290" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1290" bodyend="1292"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a0ba464688c3d88f538e7682f94e405de" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; SetValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], const typename DocumentType::Ch
                    *value)
                </argsstring>
                <name>SetValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>const typename DocumentType::Ch *</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1295" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1295" bodyend="1297"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1ad3de3c5603fb925ad5eafcb180d6353f" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; SwapValueByPointer</definition>
                <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, typename
                    T::ValueType &amp;value, typename T::AllocatorType &amp;a)
                </argsstring>
                <name>SwapValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>typename T::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1315" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1315" bodyend="1317"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1af869f27d42f2b0a64ca38f080226a60c" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>T::ValueType &amp;</type>
                <definition>T::ValueType&amp; SwapValueByPointer</definition>
                <argsstring>(T &amp;root, const CharType(&amp;source)[N], typename T::ValueType &amp;value, typename
                    T::AllocatorType &amp;a)
                </argsstring>
                <name>SwapValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>typename T::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <param>
                    <type>typename T::AllocatorType &amp;</type>
                    <declname>a</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1320" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1320" bodyend="1322"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a6f4346d9c37462bb06eed1ea48d9bc83" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; SwapValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt;
                    &amp;pointer, typename DocumentType::ValueType &amp;value)
                </argsstring>
                <name>SwapValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        DocumentType::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <param>
                    <type>typename DocumentType::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1325" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1325" bodyend="1327"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a05e9b62d5216c2158a878dd821cb576f" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename DocumentType</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>DocumentType::ValueType &amp;</type>
                <definition>DocumentType::ValueType&amp; SwapValueByPointer</definition>
                <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], typename
                    DocumentType::ValueType &amp;value)
                </argsstring>
                <name>SwapValueByPointer</name>
                <param>
                    <type>DocumentType &amp;</type>
                    <declname>document</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <param>
                    <type>typename DocumentType::ValueType &amp;</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1330" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1330" bodyend="1332"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                </templateparamlist>
                <type>bool</type>
                <definition>bool EraseValueByPointer</definition>
                <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer)</argsstring>
                <name>EraseValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename
                        T::ValueType &gt; &amp;
                    </type>
                    <declname>pointer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1337" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1337" bodyend="1339"/>
            </memberdef>
            <memberdef kind="function" id="pointer_8h_1a392608401615d4655338ebb295116666" prot="public" static="no"
                       const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>typename T</type>
                    </param>
                    <param>
                        <type>typename CharType</type>
                    </param>
                    <param>
                        <type>size_t</type>
                        <declname>N</declname>
                        <defname>N</defname>
                    </param>
                </templateparamlist>
                <type>bool</type>
                <definition>bool EraseValueByPointer</definition>
                <argsstring>(T &amp;root, const CharType(&amp;source)[N])</argsstring>
                <name>EraseValueByPointer</name>
                <param>
                    <type>T &amp;</type>
                    <declname>root</declname>
                </param>
                <param>
                    <type>const CharType(&amp;)</type>
                    <declname>source</declname>
                    <array>[N]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1342" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1342" bodyend="1344"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="enum">
            <memberdef kind="enum" id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be"
                       prot="public" static="no">
                <name>PointerParseErrorCode</name>
                <enumvalue
                        id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                        prot="public">
                    <name>kPointerParseErrorNone</name>
                    <initializer>= 0</initializer>
                    <briefdescription>
                        <para>The parse is successful.</para>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                        id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77"
                        prot="public">
                    <name>kPointerParseErrorTokenMustBeginWithSolidus</name>
                    <briefdescription>
                        <para>A token must begin with a &apos;/&apos;.</para>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                        id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b"
                        prot="public">
                    <name>kPointerParseErrorInvalidEscape</name>
                    <briefdescription>
                        <para>Invalid escape.</para>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                        id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35"
                        prot="public">
                    <name>kPointerParseErrorInvalidPercentEncoding</name>
                    <briefdescription>
                        <para>Invalid percent encoding in URI fragment.</para>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                        id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38"
                        prot="public">
                    <name>kPointerParseErrorCharacterMustPercentEncode</name>
                    <briefdescription>
                        <para>A character must percent encoded in URI fragment.</para>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                    <para>Error code of parsing.</para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <simplesect kind="see">
                            <para><ref refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe"
                                       kindref="member">GenericPointer::GenericPointer</ref>,
                                GenericPointer::GetParseErrorCode
                            </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="39" column="1" bodyfile="rapidjson/pointer.h" bodystart="39"
                          bodyend="46"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="typedef">
            <memberdef kind="typedef" id="pointer_8h_1a8db3e2eda83fba7d12ee284fff895262" prot="public" static="no">
                <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; <ref
                        refid="document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481" kindref="member">Value
                </ref> &gt;
                </type>
                <definition>typedef GenericPointer&lt;Value&gt; Pointer</definition>
                <argsstring></argsstring>
                <name>Pointer</name>
                <briefdescription>
                    <para>
                        <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                        for Value (UTF-8, default allocator).
                    </para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="1049" column="1" bodyfile="rapidjson/pointer.h"
                          bodystart="1049" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="var">
            <memberdef kind="variable" id="pointer_8h_1ae54ef57a7b599e262127c5adcc55960e" prot="public" static="yes"
                       mutable="no">
                <type>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc"
                         kindref="member">RAPIDJSON_NAMESPACE_BEGIN
                    </ref>
                    const
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                </type>
                <definition>RAPIDJSON_NAMESPACE_BEGIN const SizeType kPointerInvalidIndex</definition>
                <argsstring></argsstring>
                <name>kPointerInvalidIndex</name>
                <initializer>= ~<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">
                    SizeType</ref>(0)
                </initializer>
                <briefdescription>
                    <para>Represents an invalid index in <ref refid="struct_generic_pointer_1_1_token"
                                                              kindref="compound">GenericPointer::Token</ref>.
                    </para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="rapidjson/pointer.h" line="33" column="1" bodyfile="rapidjson/pointer.h" bodystart="33"
                          bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1">
                <highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>
                    source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="2">
                <highlight class="normal"></highlight>
                <highlight class="comment">//
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="3">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>
                    Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.<sp/>All<sp/>rights<sp/>reserved.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="4">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="5">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);
                    <sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="6">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>
                    obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="7">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="8">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>http://opensource.org/licenses/MIT
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="9">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="10">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed
                    <sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="11">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>
                    &quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="12">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>
                    implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the
                    <sp/>
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="13">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>
                    limitations<sp/>under<sp/>the<sp/>License.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifndef<sp/>RAPIDJSON_POINTER_H_
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#define<sp/>RAPIDJSON_POINTER_H_
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="document_8h" kindref="compound">
                    document.h</ref>&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;internal/itoa.h&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__clang__
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="22">
                <highlight class="normal">RAPIDJSON_DIAG_PUSH</highlight>
            </codeline>
            <codeline lineno="23">
                <highlight class="normal">RAPIDJSON_DIAG_OFF(</highlight>
                <highlight class="keywordflow">switch</highlight>
                <highlight class="normal">-</highlight>
                <highlight class="keyword">enum</highlight>
                <highlight class="normal">)</highlight>
            </codeline>
            <codeline lineno="24">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="25">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="26">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>_MSC_VER
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="27">
                <highlight class="normal">RAPIDJSON_DIAG_PUSH</highlight>
            </codeline>
            <codeline lineno="28">
                <highlight class="normal">RAPIDJSON_DIAG_OFF(4512)
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>assignment<sp/>operator<sp/>could<sp/>not<sp/>be<sp/>generated
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="29">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="30">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="31">
                <highlight class="normal">
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc"
                         kindref="member">RAPIDJSON_NAMESPACE_BEGIN
                    </ref>
                </highlight>
            </codeline>
            <codeline lineno="32">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="33">
                <highlight class="normal"></highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                    <sp/>kPointerInvalidIndex<sp/>=<sp/>~<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5"
                                                              kindref="member">SizeType</ref>(0);
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="34">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="36"></codeline>
            <codeline lineno="39" refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be"
                      refkind="member">
                <highlight class="keyword">enum</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be"
                         kindref="member">PointerParseErrorCode
                    </ref>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="40"
                      refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                         kindref="member">kPointerParseErrorNone
                    </ref>
                    <sp/>=<sp/>0,
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="41">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="42"
                      refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77"
                         kindref="member">kPointerParseErrorTokenMustBeginWithSolidus</ref>,
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="43"
                      refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b"
                         kindref="member">kPointerParseErrorInvalidEscape</ref>,
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="44"
                      refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35"
                         kindref="member">kPointerParseErrorInvalidPercentEncoding</ref>,
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="45"
                      refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38"
                         kindref="member">kPointerParseErrorCharacterMustPercentEncode
                    </ref>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="46">
                <highlight class="normal">};</highlight>
            </codeline>
            <codeline lineno="47">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="49">
                <highlight class="comment">//<sp/>GenericPointer
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="50">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="52"></codeline>
            <codeline lineno="80">
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>Allocator<sp/>=<sp/>CrtAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="81">
                <highlight class="normal"></highlight>
                <highlight class="keyword">class
                    <sp/>
                </highlight>
                <highlight class="normal">
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="82">
                <highlight class="normal"></highlight>
                <highlight class="keyword">public</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="83" refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::EncodingType
                    <sp/>
                    <ref refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">
                        EncodingType</ref>;
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="84" refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::Ch
                    <sp/>
                    <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="85">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="87"></codeline>
            <codeline lineno="99" refid="struct_generic_pointer_1_1_token" refkind="compound">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">struct
                    <sp/>
                </highlight>
                <highlight class="normal">
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="100" refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                        name</ref>;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="101" refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length</ref>;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="102" refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf"
                      refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">
                        index</ref>;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="103">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>};
                </highlight>
            </codeline>
            <codeline lineno="104">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="106"></codeline>
            <codeline lineno="107"></codeline>
            <codeline lineno="109" refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" kindref="member">
                        GenericPointer</ref>(Allocator*<sp/>allocator<sp/>=<sp/>0)<sp/>:<sp/>allocator_(allocator),<sp/>
                    ownAllocator_(),<sp/>nameBuffer_(),<sp/>tokens_(),<sp/>tokenCount_(),<sp/>parseErrorOffset_(),<sp/>
                    parseErrorCode_(<ref
                        refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                        kindref="member">kPointerParseErrorNone</ref>)<sp/>{}
                </highlight>
            </codeline>
            <codeline lineno="110">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="112"></codeline>
            <codeline lineno="116" refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">explicit</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" kindref="member">
                        GenericPointer</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>source,<sp/>Allocator*<sp/>allocator<sp/>=<sp/>0)<sp/>:<sp/>
                    allocator_(allocator),<sp/>ownAllocator_(),<sp/>nameBuffer_(),<sp/>tokens_(),<sp/>tokenCount_(),
                    <sp/>parseErrorOffset_(),<sp/>parseErrorCode_(<ref
                            refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                            kindref="member">kPointerParseErrorNone</ref>)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="117">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Parse(source,<sp/>internal::StrLen(source));
                </highlight>
            </codeline>
            <codeline lineno="118">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="119">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="120">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="121">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="127">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">explicit</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" kindref="member">
                        GenericPointer</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/>source,<sp/>Allocator*<sp/>allocator
                    <sp/>=<sp/>0)<sp/>:<sp/>allocator_(allocator),<sp/>ownAllocator_(),<sp/>nameBuffer_(),<sp/>
                    tokens_(),<sp/>tokenCount_(),<sp/>parseErrorOffset_(),<sp/>parseErrorCode_(<ref
                            refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                            kindref="member">kPointerParseErrorNone</ref>)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="128">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Parse(source.c_str(),<sp/>source.size());
                </highlight>
            </codeline>
            <codeline lineno="129">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="130">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="131">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="133"></codeline>
            <codeline lineno="139" refid="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" kindref="member">
                        GenericPointer</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>source,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length</ref>,<sp/>Allocator*<sp/>allocator<sp/>=<sp/>0)<sp/>:<sp/>allocator_(allocator),<sp/>
                    ownAllocator_(),<sp/>nameBuffer_(),<sp/>tokens_(),<sp/>tokenCount_(),<sp/>parseErrorOffset_(),<sp/>
                    parseErrorCode_(<ref
                        refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                        kindref="member">kPointerParseErrorNone</ref>)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="140">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Parse(source,<sp/>length);
                </highlight>
            </codeline>
            <codeline lineno="141">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="142">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="144"></codeline>
            <codeline lineno="165" refid="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" kindref="member">
                        GenericPointer</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>*<sp/>tokens,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>tokenCount)<sp/>:<sp/>allocator_(),<sp/>ownAllocator_(),<sp/>
                    nameBuffer_(),<sp/>tokens_(const_cast&lt;<ref refid="struct_generic_pointer_1_1_token"
                                                                  kindref="compound">Token</ref>*&gt;(tokens)),<sp/>
                    tokenCount_(tokenCount),<sp/>parseErrorOffset_(),<sp/>parseErrorCode_(<ref
                            refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                            kindref="member">kPointerParseErrorNone</ref>)<sp/>{}
                </highlight>
            </codeline>
            <codeline lineno="166">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="168" refid="class_generic_pointer_1a18d671bb793c6b843d5496b2b130cb70" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1a18d671bb793c6b843d5496b2b130cb70" kindref="member">
                        GenericPointer</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs,<sp/>
                    Allocator*<sp/>allocator<sp/>=<sp/>0)<sp/>:<sp/>allocator_(allocator),<sp/>ownAllocator_(),<sp/>
                    nameBuffer_(),<sp/>tokens_(),<sp/>tokenCount_(),<sp/>parseErrorOffset_(),<sp/>parseErrorCode_(<ref
                        refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                        kindref="member">kPointerParseErrorNone</ref>)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="169">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>*
                </highlight>
                <highlight class="keyword">this</highlight>
                <highlight class="normal"><sp/>=<sp/>rhs;
                </highlight>
            </codeline>
            <codeline lineno="170">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="171">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="173" refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" kindref="member">
                        ~GenericPointer</ref>()<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="174">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(nameBuffer_)
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>If<sp/>user-supplied<sp/>tokens<sp/>constructor<sp/>is<sp/>used,<sp/>
                    nameBuffer_<sp/>is<sp/>nullptr<sp/>and<sp/>tokens_<sp/>are<sp/>not<sp/>deallocated.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="175">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Allocator::Free(tokens_);
                </highlight>
            </codeline>
            <codeline lineno="176">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a" kindref="member">RAPIDJSON_DELETE</ref>
                    (ownAllocator_);
                </highlight>
            </codeline>
            <codeline lineno="177">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="178">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="180" refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" kindref="member">
                        operator=</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="181">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">this</highlight>
                <highlight class="normal"><sp/>!=<sp/>&amp;rhs)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="182">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Do<sp/>not<sp/>delete<sp/>ownAllcator
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="183">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(nameBuffer_)
                </highlight>
            </codeline>
            <codeline lineno="184">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Allocator::Free(tokens_);
                </highlight>
            </codeline>
            <codeline lineno="185">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="186">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>tokenCount_<sp/>=<sp/>rhs.tokenCount_;
                </highlight>
            </codeline>
            <codeline lineno="187">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>parseErrorOffset_<sp/>=<sp/>rhs.parseErrorOffset_;
                </highlight>
            </codeline>
            <codeline lineno="188">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>parseErrorCode_<sp/>=<sp/>rhs.parseErrorCode_;
                </highlight>
            </codeline>
            <codeline lineno="189">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="190">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(rhs.nameBuffer_)
                </highlight>
            </codeline>
            <codeline lineno="191">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>CopyFromRaw(rhs);
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Normally<sp/>parsed<sp/>tokens.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="192">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="193">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>tokens_<sp/>=<sp/>rhs.tokens_;
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>User<sp/>supplied<sp/>const<sp/>tokens.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="194">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>nameBuffer_<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="195">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="196">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="197">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>*
                </highlight>
                <highlight class="keyword">this</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="198">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="199">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="201"></codeline>
            <codeline lineno="203"></codeline>
            <codeline lineno="204"></codeline>
            <codeline lineno="206"></codeline>
            <codeline lineno="211" refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/>
                    Allocator*<sp/>allocator<sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="212">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                    <sp/>r;
                </highlight>
            </codeline>
            <codeline lineno="213">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>r.allocator_<sp/>=<sp/>allocator;
                </highlight>
            </codeline>
            <codeline lineno="214">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch<sp/>*p<sp/>=<sp/>r.CopyFromRaw(*
                </highlight>
                <highlight class="keyword">this</highlight>
                <highlight class="normal">,<sp/>1,<sp/>token.
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length
                    </ref>
                    <sp/>+<sp/>1);
                </highlight>
            </codeline>
            <codeline lineno="215">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::memcpy(p,<sp/>token.<ref
                        refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                    name</ref>,<sp/>(token.
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length
                    </ref>
                    <sp/>+<sp/>1)<sp/>*
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(Ch));</highlight>
            </codeline>
            <codeline lineno="216">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>r.tokens_[tokenCount_].
                    <ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                        name
                    </ref>
                    <sp/>=<sp/>p;
                </highlight>
            </codeline>
            <codeline lineno="217">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>r.tokens_[tokenCount_].
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length
                    </ref>
                    <sp/>=<sp/>token.<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d"
                                          kindref="member">length</ref>;
                </highlight>
            </codeline>
            <codeline lineno="218">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>r.tokens_[tokenCount_].
                    <ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">
                        index
                    </ref>
                    <sp/>=<sp/>token.<ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf"
                                          kindref="member">index</ref>;
                </highlight>
            </codeline>
            <codeline lineno="219">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>r;
                </highlight>
            </codeline>
            <codeline lineno="220">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="221">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="223"></codeline>
            <codeline lineno="229" refid="class_generic_pointer_1a9f8a1711f5b8e0d951c25c6c65326f77" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                    <sp/>
                    <ref refid="class_generic_pointer_1a9f8a1711f5b8e0d951c25c6c65326f77" kindref="member">Append</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                        name</ref>,
                    <sp/>
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length</ref>,<sp/>Allocator*<sp/>allocator<sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="230">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>token<sp/>=<sp/>{
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                        name</ref>,
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length</ref>,<sp/>kPointerInvalidIndex<sp/>};
                </highlight>
            </codeline>
            <codeline lineno="231">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>
                    (token,<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="232">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="233">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="235"></codeline>
            <codeline lineno="240">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="241">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">
                        RAPIDJSON_DISABLEIF_RETURN</ref>((internal::NotExpr&lt;internal::IsSame&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">internal::RemoveConst&lt;T&gt;::Type</ref>
                    ,<sp/>Ch&gt;<sp/>&gt;),<sp/>(<ref refid="class_generic_pointer" kindref="compound">
                    GenericPointer</ref>))
                </highlight>
            </codeline>
            <codeline lineno="242">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>
                    (T*
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                        name</ref>,<sp/>Allocator*<sp/>allocator<sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="243">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>
                    (name,<sp/>StrLen(name),<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="244">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="245">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="246">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="247">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="253">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/>name,<sp/>Allocator*<sp/>allocator
                    <sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="254">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>
                    (name.c_str(),
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                </highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(name.size()),<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="255">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="256">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="257">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="259"></codeline>
            <codeline lineno="264">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">
                        index</ref>,<sp/>Allocator*<sp/>allocator<sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="265">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>buffer[21];
                </highlight>
            </codeline>
            <codeline lineno="266">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal">*<sp/>end<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5"
                                                kindref="member">SizeType</ref>)<sp/>==<sp/>4<sp/>?<sp/>
                    internal::u32toa(index,<sp/>buffer)<sp/>:<sp/>internal::u64toa(index,<sp/>buffer);
                </highlight>
            </codeline>
            <codeline lineno="267">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length
                    </ref>
                    <sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                </highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(end<sp/>-<sp/>buffer);
                </highlight>
            </codeline>
            <codeline lineno="268">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>buffer[<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d"
                                     kindref="member">length</ref>]<sp/>=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;\0&apos;</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="269">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="270">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(Ch)<sp/>==<sp/>1)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="271">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>token<sp/>=<sp/>{
                    <sp/>
                </highlight>
                <highlight class="keyword">reinterpret_cast&lt;</highlight>
                <highlight class="normal">Ch*</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(buffer),<sp/>length,<sp/>index<sp/>};
                </highlight>
            </codeline>
            <codeline lineno="272">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>
                    (token,<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="273">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="274">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="275">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch<sp/>name[21];
                </highlight>
            </codeline>
            <codeline lineno="276">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length</ref>;<sp/>i++)
                </highlight>
            </codeline>
            <codeline lineno="277">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>name[i]<sp/>=<sp/>buffer[i];
                </highlight>
            </codeline>
            <codeline lineno="278">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>token<sp/>=<sp/>{
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                        name</ref>,
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length</ref>,<sp/>index<sp/>};
                </highlight>
            </codeline>
            <codeline lineno="279">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>
                    (token,<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="280">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="281">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="282">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="284"></codeline>
            <codeline lineno="289">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>ValueType&amp;<sp/>token,<sp/>Allocator*<sp/>allocator<sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="290">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(token.IsString())
                </highlight>
            </codeline>
            <codeline lineno="291">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>
                    (token.GetString(),<sp/>token.GetStringLength(),<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="292">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="293">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(token.IsUint64());
                </highlight>
            </codeline>
            <codeline lineno="294">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(token.GetUint64()<sp/>&lt;=
                    <sp/>
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>(~0));
                </highlight>
            </codeline>
            <codeline lineno="295">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>
                    (static_cast&lt;SizeType&gt;(token.GetUint64()),<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="296">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="297">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="298">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="300"></codeline>
            <codeline lineno="301"></codeline>
            <codeline lineno="303">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>IsValid()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>parseErrorCode_<sp/>==
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                         kindref="member">kPointerParseErrorNone</ref>;<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="304">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="306">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>GetParseErrorOffset()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>parseErrorOffset_;<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="307">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="309">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be"
                         kindref="member">PointerParseErrorCode
                    </ref>
                    <sp/>GetParseErrorCode()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>parseErrorCode_;<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="310">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="312"></codeline>
            <codeline lineno="314">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Allocator&amp;<sp/>GetAllocator()<sp/>{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>*allocator_;<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="315">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="317"></codeline>
            <codeline lineno="318"></codeline>
            <codeline lineno="320">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>*<sp/>GetTokens()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>tokens_;<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="321">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="323">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>GetTokenCount()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>tokenCount_;<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="324">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="326"></codeline>
            <codeline lineno="328"></codeline>
            <codeline lineno="329"></codeline>
            <codeline lineno="331"></codeline>
            <codeline lineno="334">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>operator==(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="335">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!IsValid()<sp/>||<sp/>!rhs.IsValid()<sp/>||<sp/>tokenCount_<sp/>!=<sp/>
                    rhs.tokenCount_)
                </highlight>
            </codeline>
            <codeline lineno="336">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="337">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="338">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tokenCount_;<sp/>i++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="339">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(tokens_[i].index<sp/>!=<sp/>rhs.tokens_[i].
                    <ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">
                        index
                    </ref>
                    <sp/>||
                </highlight>
            </codeline>
            <codeline lineno="340">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>tokens_[i].length<sp/>!=<sp/>rhs.tokens_[i].
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length
                    </ref>
                    <sp/>||
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="341">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>(tokens_[i].length<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>std::memcmp(tokens_[i].name,<sp/>
                    rhs.tokens_[i].<ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c"
                                        kindref="member">name</ref>,
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(Ch)*<sp/>tokens_[i].length)<sp/>!=<sp/>0))
                </highlight>
            </codeline>
            <codeline lineno="342">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="343">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="344">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="345">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="346">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="347">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="348">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="349">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="351"></codeline>
            <codeline lineno="354">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>operator!=(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>!(*
                </highlight>
                <highlight class="keyword">this</highlight>
                <highlight class="normal"><sp/>==<sp/>rhs);<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="355">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="357"></codeline>
            <codeline lineno="359"></codeline>
            <codeline lineno="360"></codeline>
            <codeline lineno="362"></codeline>
            <codeline lineno="366">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal">&lt;</highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>OutputStream&gt;
                </highlight>
            </codeline>
            <codeline lineno="367">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>Stringify(OutputStream&amp;<sp/>os)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="368">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Stringify&lt;false,<sp/>OutputStream&gt;(os);
                </highlight>
            </codeline>
            <codeline lineno="369">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="370">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="372"></codeline>
            <codeline lineno="376">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal">&lt;</highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>OutputStream&gt;
                </highlight>
            </codeline>
            <codeline lineno="377">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>StringifyUriFragment(OutputStream&amp;<sp/>os)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="378">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Stringify&lt;true,<sp/>OutputStream&gt;(os);
                </highlight>
            </codeline>
            <codeline lineno="379">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="380">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="382"></codeline>
            <codeline lineno="384"></codeline>
            <codeline lineno="385"></codeline>
            <codeline lineno="387"></codeline>
            <codeline lineno="401">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;<sp/>Create(ValueType&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal">*<sp/>alreadyExist<sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="402">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(IsValid());
                </highlight>
            </codeline>
            <codeline lineno="403">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType*<sp/>v<sp/>=<sp/>&amp;root;
                </highlight>
            </codeline>
            <codeline lineno="404">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>exist<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="405">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>*t<sp/>=<sp/>tokens_;<sp/>t<sp/>!=<sp/>tokens_<sp/>+<sp/>tokenCount_;<sp/>++t)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="406">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(v-&gt;IsArray()<sp/>&amp;&amp;<sp/>t-&gt;name[0]<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;-&apos;</highlight>
                <highlight class="normal"><sp/>&amp;&amp;<sp/>t-&gt;length<sp/>==<sp/>1)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="407">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v-&gt;PushBack(ValueType().Move(),<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="408">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v<sp/>=<sp/>&amp;((*v)[v-&gt;Size()<sp/>-<sp/>1]);
                </highlight>
            </codeline>
            <codeline lineno="409">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>exist<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="410">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="411">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="412">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(t-&gt;index<sp/>==<sp/>kPointerInvalidIndex)<sp/>{
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>must<sp/>be<sp/>object<sp/>name
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="413">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!v-&gt;IsObject())
                </highlight>
            </codeline>
            <codeline lineno="414">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v-&gt;SetObject();
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Change<sp/>to<sp/>Object
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="415">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="416">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>object<sp/>name<sp/>or<sp/>array<sp/>index
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="417">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!v-&gt;IsArray()<sp/>&amp;&amp;<sp/>!v-&gt;IsObject())
                </highlight>
            </codeline>
            <codeline lineno="418">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v-&gt;SetArray();
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Change<sp/>to<sp/>Array
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="419">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="420">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="421">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(v-&gt;IsArray())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="422">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(t-&gt;index<sp/>&gt;=<sp/>v-&gt;Size())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="423">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v-&gt;Reserve(t-&gt;index<sp/>+<sp/>1,<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="424">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">while</highlight>
                <highlight class="normal"><sp/>(t-&gt;index<sp/>&gt;=<sp/>v-&gt;Size())
                </highlight>
            </codeline>
            <codeline lineno="425">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v-&gt;PushBack(ValueType().Move(),<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="426">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>exist<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="427">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="428">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v<sp/>=<sp/>&amp;((*v)[t-&gt;index]);
                </highlight>
            </codeline>
            <codeline lineno="429">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="430">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="431">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::MemberIterator<sp/>m<sp/>=<sp/>v-&gt;FindMember(<ref
                        refid="struct_generic_string_ref" kindref="compound">GenericStringRef&lt;Ch&gt;</ref>(t-&gt;name,
                    <sp/>t-&gt;length));
                </highlight>
            </codeline>
            <codeline lineno="432">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(m<sp/>==<sp/>v-&gt;MemberEnd())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="433">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v-&gt;AddMember(ValueType(t-&gt;name,<sp/>t-&gt;length,<sp/>allocator).Move(),<sp/>
                    ValueType().Move(),<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="434">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v<sp/>=<sp/>&amp;(--v-&gt;MemberEnd())-&gt;value;
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Assumes<sp/>AddMember()<sp/>appends<sp/>at<sp/>the<sp/>end
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="435">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>exist<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="436">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="437">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="438">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v<sp/>=<sp/>&amp;m-&gt;value;
                </highlight>
            </codeline>
            <codeline lineno="439">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="440">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="441">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="442">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="443">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(alreadyExist)
                </highlight>
            </codeline>
            <codeline lineno="444">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>*alreadyExist<sp/>=<sp/>exist;
                </highlight>
            </codeline>
            <codeline lineno="445">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="446">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>*v;
                </highlight>
            </codeline>
            <codeline lineno="447">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="448">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="450"></codeline>
            <codeline lineno="455">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="456">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;<sp/>Create(<ref refid="class_generic_document" kindref="compound">
                    GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;
                    <sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal">*<sp/>alreadyExist<sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="457">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(document,<sp/>document.<ref
                        refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" kindref="member">
                    GetAllocator</ref>(),<sp/>alreadyExist);
                </highlight>
            </codeline>
            <codeline lineno="458">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="459">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="461"></codeline>
            <codeline lineno="463"></codeline>
            <codeline lineno="464"></codeline>
            <codeline lineno="466"></codeline>
            <codeline lineno="479">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType*<sp/>Get(ValueType&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="480">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(IsValid());
                </highlight>
            </codeline>
            <codeline lineno="481">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType*<sp/>v<sp/>=<sp/>&amp;root;
                </highlight>
            </codeline>
            <codeline lineno="482">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>*t<sp/>=<sp/>tokens_;<sp/>t<sp/>!=<sp/>tokens_<sp/>+<sp/>tokenCount_;<sp/>++t)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="483">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">switch</highlight>
                <highlight class="normal"><sp/>(v-&gt;GetType())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="484">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">case</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f"
                         kindref="member">kObjectType</ref>:
                </highlight>
            </codeline>
            <codeline lineno="485">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="486">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::MemberIterator<sp/>m<sp/>=<sp/>v-&gt;FindMember(<ref
                        refid="struct_generic_string_ref" kindref="compound">GenericStringRef&lt;Ch&gt;</ref>(t-&gt;name,
                    <sp/>t-&gt;length));
                </highlight>
            </codeline>
            <codeline lineno="487">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(m<sp/>==<sp/>v-&gt;MemberEnd())
                </highlight>
            </codeline>
            <codeline lineno="488">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">break</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="489">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v<sp/>=<sp/>&amp;m-&gt;value;
                </highlight>
            </codeline>
            <codeline lineno="490">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="491">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">continue</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="492">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">case</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8"
                         kindref="member">kArrayType</ref>:
                </highlight>
            </codeline>
            <codeline lineno="493">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(t-&gt;index<sp/>==<sp/>kPointerInvalidIndex<sp/>||<sp/>t-&gt;index<sp/>
                    &gt;=<sp/>v-&gt;Size())
                </highlight>
            </codeline>
            <codeline lineno="494">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">break</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="495">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v<sp/>=<sp/>&amp;((*v)[t-&gt;index]);
                </highlight>
            </codeline>
            <codeline lineno="496">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">continue</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="497">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">default</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="498">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">break</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="499">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="500">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="501">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Error:<sp/>unresolved<sp/>token
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="502">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(unresolvedTokenIndex)
                </highlight>
            </codeline>
            <codeline lineno="503">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>*unresolvedTokenIndex<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(t<sp/>-<sp/>tokens_);
                </highlight>
            </codeline>
            <codeline lineno="504">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="505">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="506">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>v;
                </highlight>
            </codeline>
            <codeline lineno="507">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="508">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="510"></codeline>
            <codeline lineno="514">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>ValueType*<sp/>Get(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>ValueType&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="515">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Get(const_cast&lt;ValueType&amp;&gt;(root),<sp/>unresolvedTokenIndex);
                </highlight>
            </codeline>
            <codeline lineno="516">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="517">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="519"></codeline>
            <codeline lineno="521"></codeline>
            <codeline lineno="522"></codeline>
            <codeline lineno="524"></codeline>
            <codeline lineno="533">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;<sp/>GetWithDefault(ValueType&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>ValueType&amp;<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="534">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>alreadyExist;
                </highlight>
            </codeline>
            <codeline lineno="535">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>v<sp/>=<sp/>Create(root,
                    <sp/>allocator,<sp/>&amp;alreadyExist);
                </highlight>
            </codeline>
            <codeline lineno="536">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>alreadyExist<sp/>?<sp/>v<sp/>:<sp/>v.CopyFrom(defaultValue,<sp/>
                    allocator);
                </highlight>
            </codeline>
            <codeline lineno="537">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="538">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="540">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;<sp/>GetWithDefault(ValueType&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="541">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>alreadyExist;
                </highlight>
            </codeline>
            <codeline lineno="542">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>v<sp/>=<sp/>Create(root,
                    <sp/>allocator,<sp/>&amp;alreadyExist);
                </highlight>
            </codeline>
            <codeline lineno="543">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>alreadyExist<sp/>?<sp/>v<sp/>:<sp/>v.SetString(defaultValue,<sp/>
                    allocator);
                </highlight>
            </codeline>
            <codeline lineno="544">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="545">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="546">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="547">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;<sp/>GetWithDefault(ValueType&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="549">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>alreadyExist;
                </highlight>
            </codeline>
            <codeline lineno="550">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>v<sp/>=<sp/>Create(root,
                    <sp/>allocator,<sp/>&amp;alreadyExist);
                </highlight>
            </codeline>
            <codeline lineno="551">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>alreadyExist<sp/>?<sp/>v<sp/>:<sp/>v.SetString(defaultValue,<sp/>
                    allocator);
                </highlight>
            </codeline>
            <codeline lineno="552">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="553">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="554">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="556"></codeline>
            <codeline lineno="559">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="560">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">
                        RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T&gt;</ref>
                    <sp/>&gt;),<sp/>(ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="561">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>GetWithDefault(ValueType&amp;<sp/>root,<sp/>T<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="562">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>GetWithDefault(root,<sp/>ValueType(defaultValue).Move(),<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="563">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="564">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="566">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="567">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;<sp/>GetWithDefault(<ref refid="class_generic_document" kindref="compound">
                    GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;
                    <sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>ValueType&amp;<sp/>defaultValue)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="568">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>GetWithDefault(document,<sp/>defaultValue,<sp/>document.<ref
                        refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" kindref="member">
                    GetAllocator</ref>());
                </highlight>
            </codeline>
            <codeline lineno="569">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="570">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="572">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="573">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;<sp/>GetWithDefault(<ref refid="class_generic_document" kindref="compound">
                    GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;
                    <sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>defaultValue)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="574">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>GetWithDefault(document,<sp/>defaultValue,<sp/>document.<ref
                        refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" kindref="member">
                    GetAllocator</ref>());
                </highlight>
            </codeline>
            <codeline lineno="575">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="576">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="577">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="578">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="580">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;<sp/>GetWithDefault(<ref refid="class_generic_document" kindref="compound">
                    GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;
                    <sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/>defaultValue)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="581">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>GetWithDefault(document,<sp/>defaultValue,<sp/>document.<ref
                        refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" kindref="member">
                    GetAllocator</ref>());
                </highlight>
            </codeline>
            <codeline lineno="582">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="583">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="584">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="586"></codeline>
            <codeline lineno="589">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="590">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">
                        RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T&gt;</ref>
                    <sp/>&gt;),<sp/>(ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="591">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>GetWithDefault(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType,
                    typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/>T<sp/>
                    defaultValue)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="592">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>GetWithDefault(document,<sp/>defaultValue,<sp/>document.<ref
                        refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" kindref="member">
                    GetAllocator</ref>());
                </highlight>
            </codeline>
            <codeline lineno="593">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="594">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="596"></codeline>
            <codeline lineno="598"></codeline>
            <codeline lineno="599"></codeline>
            <codeline lineno="601"></codeline>
            <codeline lineno="610" refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>
                    (ValueType&amp;<sp/>root,<sp/>ValueType&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="611">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(root,<sp/>allocator)<sp/>=<sp/>value;
                </highlight>
            </codeline>
            <codeline lineno="612">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="613">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="615" refid="class_generic_pointer_1a61c0e9695cb0c96d465c8e1c21bd48fa" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1a61c0e9695cb0c96d465c8e1c21bd48fa" kindref="member">Set</ref>
                    (ValueType&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>ValueType&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="616">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(root,<sp/>allocator).CopyFrom(value,<sp/>allocator);
                </highlight>
            </codeline>
            <codeline lineno="617">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="618">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="620" refid="class_generic_pointer_1a37ea2d2b205d3642d1e615b8b866666b" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1a37ea2d2b205d3642d1e615b8b866666b" kindref="member">Set</ref>
                    (ValueType&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="621">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(root,<sp/>allocator)<sp/>=<sp/>ValueType(value,<sp/>
                    allocator).Move();
                </highlight>
            </codeline>
            <codeline lineno="622">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="623">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="624">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="625">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>
                    (ValueType&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="627">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(root,<sp/>allocator)<sp/>=<sp/>ValueType(value,<sp/>
                    allocator).Move();
                </highlight>
            </codeline>
            <codeline lineno="628">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="629">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="630">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="632"></codeline>
            <codeline lineno="635">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="636">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">
                        RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T&gt;</ref>
                    <sp/>&gt;),<sp/>(ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="637">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>
                    (ValueType&amp;<sp/>root,<sp/>T<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="638">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(root,<sp/>allocator)<sp/>=<sp/>ValueType(value).Move();
                </highlight>
            </codeline>
            <codeline lineno="639">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="640">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="642">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="643" refid="class_generic_pointer_1aeec3daf051dfa8b8fbf23ea4f9a238e4" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1aeec3daf051dfa8b8fbf23ea4f9a238e4" kindref="member">Set</ref>
                    (<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename
                    ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/>ValueType&amp;<sp/>value)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="644">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(document)<sp/>=<sp/>value;
                </highlight>
            </codeline>
            <codeline lineno="645">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="646">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="648">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="649" refid="class_generic_pointer_1a8ed0a7ce95331b7433371df7150b84a9" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1a8ed0a7ce95331b7433371df7150b84a9" kindref="member">Set</ref>
                    (<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename
                    ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>ValueType&amp;<sp/>value)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="650">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(document).CopyFrom(value,<sp/>document.<ref
                        refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" kindref="member">
                    GetAllocator</ref>());
                </highlight>
            </codeline>
            <codeline lineno="651">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="652">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="654">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="655" refid="class_generic_pointer_1abaa0cda4ed84a4435871d355279bab8e" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1abaa0cda4ed84a4435871d355279bab8e" kindref="member">Set</ref>
                    (<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename
                    ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>value)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="656">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(document)<sp/>=<sp/>ValueType(value,<sp/>document.<ref
                        refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" kindref="member">
                    GetAllocator</ref>()).Move();
                </highlight>
            </codeline>
            <codeline lineno="657">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="658">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="659">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="660">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="662">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>
                    (<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename
                    ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/>value)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="663">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(document)<sp/>=<sp/>ValueType(value,<sp/>document.<ref
                        refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" kindref="member">
                    GetAllocator</ref>()).Move();
                </highlight>
            </codeline>
            <codeline lineno="664">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="665">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="666">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="668"></codeline>
            <codeline lineno="671">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="672">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">
                        RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T&gt;</ref>
                    <sp/>&gt;),<sp/>(ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="673">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>
                    (<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename
                    ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/>T<sp/>value)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="674">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(document)<sp/>=<sp/>value;
                </highlight>
            </codeline>
            <codeline lineno="675">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="676">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="678"></codeline>
            <codeline lineno="680"></codeline>
            <codeline lineno="681"></codeline>
            <codeline lineno="683"></codeline>
            <codeline lineno="692" refid="class_generic_pointer_1a3b40ad3e851640e295a4623b624af395" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1a3b40ad3e851640e295a4623b624af395" kindref="member">Swap</ref>
                    (ValueType&amp;<sp/>root,<sp/>ValueType&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::AllocatorType&amp;<sp/>allocator)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="693">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(root,<sp/>allocator).Swap(value);
                </highlight>
            </codeline>
            <codeline lineno="694">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="695">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="697">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>stackAllocator&gt;
                </highlight>
            </codeline>
            <codeline lineno="698" refid="class_generic_pointer_1aa84bc7e016c906436f464c8cbd858edb" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType&amp;
                    <sp/>
                    <ref refid="class_generic_pointer_1aa84bc7e016c906436f464c8cbd858edb" kindref="member">Swap</ref>
                    (<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename
                    ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/>ValueType&amp;<sp/>value)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="699">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>Create(document).Swap(value);
                </highlight>
            </codeline>
            <codeline lineno="700">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="701">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="703"></codeline>
            <codeline lineno="705"></codeline>
            <codeline lineno="711" refid="class_generic_pointer_1a759c07e81c9738e7a2a68b36d5c28643" refkind="member">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer_1a759c07e81c9738e7a2a68b36d5c28643" kindref="member">Erase</ref>
                    (ValueType&amp;<sp/>root)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="712">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(IsValid());
                </highlight>
            </codeline>
            <codeline lineno="713">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(tokenCount_<sp/>==<sp/>0)
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Cannot<sp/>erase<sp/>the<sp/>root
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="714">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="715">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="716">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ValueType*<sp/>v<sp/>=<sp/>&amp;root;
                </highlight>
            </codeline>
            <codeline lineno="717">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>*<sp/>last<sp/>=<sp/>
                    tokens_<sp/>+<sp/>(tokenCount_<sp/>-<sp/>1);
                </highlight>
            </codeline>
            <codeline lineno="718">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>*t<sp/>=<sp/>tokens_;<sp/>t<sp/>!=<sp/>last;<sp/>++t)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="719">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">switch</highlight>
                <highlight class="normal"><sp/>(v-&gt;GetType())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="720">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">case</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f"
                         kindref="member">kObjectType</ref>:
                </highlight>
            </codeline>
            <codeline lineno="721">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="722">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::MemberIterator<sp/>m<sp/>=<sp/>v-&gt;FindMember(<ref
                        refid="struct_generic_string_ref" kindref="compound">GenericStringRef&lt;Ch&gt;</ref>(t-&gt;name,
                    <sp/>t-&gt;length));
                </highlight>
            </codeline>
            <codeline lineno="723">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(m<sp/>==<sp/>v-&gt;MemberEnd())
                </highlight>
            </codeline>
            <codeline lineno="724">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="725">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v<sp/>=<sp/>&amp;m-&gt;value;
                </highlight>
            </codeline>
            <codeline lineno="726">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="727">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">break</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="728">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">case</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8"
                         kindref="member">kArrayType</ref>:
                </highlight>
            </codeline>
            <codeline lineno="729">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(t-&gt;index<sp/>==<sp/>kPointerInvalidIndex<sp/>||<sp/>t-&gt;index<sp/>
                    &gt;=<sp/>v-&gt;Size())
                </highlight>
            </codeline>
            <codeline lineno="730">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="731">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v<sp/>=<sp/>&amp;((*v)[t-&gt;index]);
                </highlight>
            </codeline>
            <codeline lineno="732">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">break</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="733">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">default</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="734">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="735">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="736">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="737">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="738">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">switch</highlight>
                <highlight class="normal"><sp/>(v-&gt;GetType())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="739">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">case</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f"
                         kindref="member">kObjectType</ref>:
                </highlight>
            </codeline>
            <codeline lineno="740">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>v-&gt;EraseMember(<ref refid="struct_generic_string_ref"
                                                                      kindref="compound">
                    GenericStringRef&lt;Ch&gt;</ref>(last-&gt;<ref
                        refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                    name</ref>,<sp/>last-&gt;<ref
                        refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                    length</ref>));
                </highlight>
            </codeline>
            <codeline lineno="741">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">case</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8"
                         kindref="member">kArrayType</ref>:
                </highlight>
            </codeline>
            <codeline lineno="742">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(last-&gt;
                    <ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">
                        index
                    </ref>
                    <sp/>==<sp/>kPointerInvalidIndex<sp/>||<sp/>last-&gt;
                    <ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">
                        index
                    </ref>
                    <sp/>&gt;=<sp/>v-&gt;Size())
                </highlight>
            </codeline>
            <codeline lineno="743">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="744">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>v-&gt;Erase(v-&gt;Begin()<sp/>+<sp/>last-&gt;<ref
                        refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">
                    index</ref>);
                </highlight>
            </codeline>
            <codeline lineno="745">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="746">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">default</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="747">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="748">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="749">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="750">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="751">
                <highlight class="normal"></highlight>
                <highlight class="keyword">private</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="753"></codeline>
            <codeline lineno="759">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch*<sp/>CopyFromRaw(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>extraToken<sp/>=<sp/>0,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>extraNameBufferSize<sp/>=<sp/>0)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="760">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!allocator_)
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>allocator<sp/>is<sp/>independently<sp/>owned.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="761">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ownAllocator_<sp/>=<sp/>allocator_<sp/>=
                    <sp/>
                    <ref refid="rapidjson_8h_1ab9e102fa2f1a0ae4914d4dac21f690a2" kindref="member">RAPIDJSON_NEW</ref>
                    (Allocator());
                </highlight>
            </codeline>
            <codeline lineno="762">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="763">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>nameBufferSize<sp/>=<sp/>rhs.tokenCount_;
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>null<sp/>terminators<sp/>for<sp/>tokens
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="764">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>*t<sp/>=<sp/>rhs.tokens_;<sp/>t<sp/>!=<sp/>rhs.tokens_<sp/>+<sp/>rhs.tokenCount_;<sp/>++t)
                </highlight>
            </codeline>
            <codeline lineno="765">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>nameBufferSize<sp/>+=<sp/>t-&gt;length;
                </highlight>
            </codeline>
            <codeline lineno="766">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="767">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>tokenCount_<sp/>=<sp/>rhs.tokenCount_<sp/>+<sp/>extraToken;
                </highlight>
            </codeline>
            <codeline lineno="768">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>tokens_<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>*
                </highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(allocator_-&gt;Malloc(tokenCount_<sp/>*
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(<ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>)
                    <sp/>+<sp/>(nameBufferSize<sp/>+<sp/>extraNameBufferSize)<sp/>*
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(Ch)));</highlight>
            </codeline>
            <codeline lineno="769">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>nameBuffer_<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">reinterpret_cast&lt;</highlight>
                <highlight class="normal">Ch<sp/>*
                </highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(tokens_<sp/>+<sp/>tokenCount_);
                </highlight>
            </codeline>
            <codeline lineno="770">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(rhs.tokenCount_<sp/>&gt;<sp/>0)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="771">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::memcpy(tokens_,<sp/>rhs.tokens_,<sp/>rhs.tokenCount_<sp/>*
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(<ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>));
                </highlight>
            </codeline>
            <codeline lineno="772">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="773">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(nameBufferSize<sp/>&gt;<sp/>0)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="774">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::memcpy(nameBuffer_,<sp/>rhs.nameBuffer_,<sp/>nameBufferSize<sp/>*
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(Ch));</highlight>
            </codeline>
            <codeline lineno="775">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="776">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="777">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Adjust<sp/>pointers<sp/>to<sp/>name<sp/>buffer
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="778">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::ptrdiff_t<sp/>diff<sp/>=<sp/>nameBuffer_<sp/>-<sp/>rhs.nameBuffer_;
                </highlight>
            </codeline>
            <codeline lineno="779">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>*t<sp/>=<sp/>tokens_;<sp/>t<sp/>!=<sp/>tokens_<sp/>+<sp/>rhs.tokenCount_;<sp/>++t)
                </highlight>
            </codeline>
            <codeline lineno="780">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>t-&gt;name<sp/>+=<sp/>diff;
                </highlight>
            </codeline>
            <codeline lineno="781">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="782">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>nameBuffer_<sp/>+<sp/>nameBufferSize;
                </highlight>
            </codeline>
            <codeline lineno="783">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="784">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="786"></codeline>
            <codeline lineno="790">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>NeedPercentEncode(Ch<sp/>c)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="791">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>!((c<sp/>&gt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;0&apos;</highlight>
                <highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>&apos;9&apos;)<sp/>||<sp/>(c<sp/>&gt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;A&apos;</highlight>
                <highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=&apos;Z&apos;)<sp/>||<sp/>(c<sp/>&gt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;a&apos;</highlight>
                <highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;z&apos;</highlight>
                <highlight class="normal">)<sp/>||<sp/>c<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;-&apos;</highlight>
                <highlight class="normal"><sp/>||<sp/>c<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;.&apos;</highlight>
                <highlight class="normal"><sp/>||<sp/>c<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;_&apos;</highlight>
                <highlight class="normal"><sp/>||<sp/>c<sp/>==
                </highlight>
                <highlight class="charliteral">&apos;~&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="792">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="793">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="795">
                <highlight class="preprocessor">#ifndef<sp/>__clang__<sp/>//<sp/>-Wdocumentation
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="796">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="801">
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="802">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Parse(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>source,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length</ref>)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="803">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(source<sp/>!=<sp/>NULL);
                </highlight>
            </codeline>
            <codeline lineno="804">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(nameBuffer_<sp/>==<sp/>0);
                </highlight>
            </codeline>
            <codeline lineno="805">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(tokens_<sp/>==<sp/>0);
                </highlight>
            </codeline>
            <codeline lineno="806">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="807">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Create<sp/>own<sp/>allocator<sp/>if<sp/>user<sp/>did<sp/>not<sp/>
                    supply.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="808">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!allocator_)
                </highlight>
            </codeline>
            <codeline lineno="809">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ownAllocator_<sp/>=<sp/>allocator_<sp/>=
                    <sp/>
                    <ref refid="rapidjson_8h_1ab9e102fa2f1a0ae4914d4dac21f690a2" kindref="member">RAPIDJSON_NEW</ref>
                    (Allocator());
                </highlight>
            </codeline>
            <codeline lineno="810">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="811">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Count<sp/>number<sp/>of<sp/>&apos;/&apos;<sp/>as<sp/>tokenCount
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="812">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>tokenCount_<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="813">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>s<sp/>=<sp/>source;<sp/>s<sp/>!=<sp/>source<sp/>+
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length</ref>;<sp/>s++)
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="814">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(*s<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;/&apos;</highlight>
                <highlight class="normal">)</highlight>
            </codeline>
            <codeline lineno="815">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>tokenCount_++;
                </highlight>
            </codeline>
            <codeline lineno="816">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="817">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>*<sp/>token<sp/>=<sp/>
                    tokens_<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>*
                </highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(allocator_-&gt;Malloc(tokenCount_<sp/>*
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(<ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>)
                    <sp/>+<sp/>length<sp/>*
                    <sp/>
                </highlight>
                <highlight class="keyword">sizeof</highlight>
                <highlight class="normal">(Ch)));</highlight>
            </codeline>
            <codeline lineno="818">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch*<sp/>name<sp/>=<sp/>nameBuffer_<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">reinterpret_cast&lt;</highlight>
                <highlight class="normal">Ch<sp/>*
                </highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(tokens_<sp/>+<sp/>tokenCount_);
                </highlight>
            </codeline>
            <codeline lineno="819">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="820">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="821">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Detect<sp/>if<sp/>it<sp/>is<sp/>a<sp/>URI<sp/>fragment
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="822">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>uriFragment<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="823">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(source[i]<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;#&apos;</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="824">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>uriFragment<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="825">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>i++;
                </highlight>
            </codeline>
            <codeline lineno="826">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="827">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="828">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(i<sp/>!=<sp/>length<sp/>&amp;&amp;<sp/>source[i]<sp/>!=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;/&apos;</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="829">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>parseErrorCode_<sp/>=
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77"
                         kindref="member">kPointerParseErrorTokenMustBeginWithSolidus</ref>;
                </highlight>
            </codeline>
            <codeline lineno="830">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">goto</highlight>
                <highlight class="normal"><sp/>error;
                </highlight>
            </codeline>
            <codeline lineno="831">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="832">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="833">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">while</highlight>
                <highlight class="normal"><sp/>(i<sp/>&lt;<sp/>length)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="834">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(source[i]<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;/&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="835">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>i++;
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>consumes<sp/>&apos;/&apos;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="836">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="837">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>token-&gt;
                    <ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                        name
                    </ref>
                    <sp/>=
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                        name</ref>;
                </highlight>
            </codeline>
            <codeline lineno="838">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>isNumber<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="839">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="840">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">while</highlight>
                <highlight class="normal"><sp/>(i<sp/>&lt;<sp/>length<sp/>&amp;&amp;<sp/>source[i]<sp/>!=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;/&apos;</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="841">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch<sp/>c<sp/>=<sp/>source[i];
                </highlight>
            </codeline>
            <codeline lineno="842">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(uriFragment)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="843">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Decoding<sp/>percent-encoding<sp/>for<sp/>URI<sp/>fragment
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="844">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(c<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;%&apos;</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="845">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>PercentDecodeStream<sp/>is(&amp;source[i],<sp/>source<sp/>+<sp/>length);
                </highlight>
            </codeline>
            <codeline lineno="846">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="struct_generic_insitu_string_stream" kindref="compound">GenericInsituStringStream&lt;EncodingType&gt;</ref>
                    <sp/>os(name);
                </highlight>
            </codeline>
            <codeline lineno="847">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch*<sp/>begin<sp/>=<sp/>os.PutBegin();
                </highlight>
            </codeline>
            <codeline lineno="848">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!<ref refid="struct_transcoder" kindref="compound">
                    Transcoder</ref>&lt;<ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/>
                    EncodingType&gt;().Validate(is,<sp/>os)<sp/>||<sp/>!is.IsValid())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="849">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>parseErrorCode_<sp/>=
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35"
                         kindref="member">kPointerParseErrorInvalidPercentEncoding</ref>;
                </highlight>
            </codeline>
            <codeline lineno="850">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">goto</highlight>
                <highlight class="normal"><sp/>error;
                </highlight>
            </codeline>
            <codeline lineno="851">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="852">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>len<sp/>=<sp/>os.PutEnd(begin);
                </highlight>
            </codeline>
            <codeline lineno="853">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>i<sp/>+=<sp/>is.Tell()<sp/>-<sp/>1;
                </highlight>
            </codeline>
            <codeline lineno="854">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(len<sp/>==<sp/>1)
                </highlight>
            </codeline>
            <codeline lineno="855">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>c<sp/>=<sp/>*<ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c"
                                           kindref="member">name</ref>;
                </highlight>
            </codeline>
            <codeline lineno="856">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="857">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>name<sp/>+=<sp/>len;
                </highlight>
            </codeline>
            <codeline lineno="858">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>isNumber<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="859">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>i++;
                </highlight>
            </codeline>
            <codeline lineno="860">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">continue</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="861">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="862">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="863">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(NeedPercentEncode(c))<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="864">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>parseErrorCode_<sp/>=
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38"
                         kindref="member">kPointerParseErrorCharacterMustPercentEncode</ref>;
                </highlight>
            </codeline>
            <codeline lineno="865">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">goto</highlight>
                <highlight class="normal"><sp/>error;
                </highlight>
            </codeline>
            <codeline lineno="866">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="867">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="868">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="869">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>i++;
                </highlight>
            </codeline>
            <codeline lineno="870">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="871">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Escaping<sp/>&quot;~0&quot;<sp/>-&gt;<sp/>&apos;~&apos;,<sp/>&quot;~1&quot;
                    <sp/>-&gt;<sp/>&apos;/&apos;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="872">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(c<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;~&apos;</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="873">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(i<sp/>&lt;<sp/>length)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="874">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>c<sp/>=<sp/>source[i];
                </highlight>
            </codeline>
            <codeline lineno="875">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(c<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;0&apos;</highlight>
                <highlight class="normal">)
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>c<sp/>=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;~&apos;</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="876">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(c<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;1&apos;</highlight>
                <highlight class="normal">)
                    <sp/>
                    <sp/>c<sp/>=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;/&apos;</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="877">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="878">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>parseErrorCode_<sp/>=
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b"
                         kindref="member">kPointerParseErrorInvalidEscape</ref>;
                </highlight>
            </codeline>
            <codeline lineno="879">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">goto</highlight>
                <highlight class="normal"><sp/>error;
                </highlight>
            </codeline>
            <codeline lineno="880">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="881">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>i++;
                </highlight>
            </codeline>
            <codeline lineno="882">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="883">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="884">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>parseErrorCode_<sp/>=
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b"
                         kindref="member">kPointerParseErrorInvalidEscape</ref>;
                </highlight>
            </codeline>
            <codeline lineno="885">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">goto</highlight>
                <highlight class="normal"><sp/>error;
                </highlight>
            </codeline>
            <codeline lineno="886">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="887">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="888">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="889">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>First<sp/>check<sp/>for<sp/>index:<sp/>all<sp/>of<sp/>characters<sp/>
                    are<sp/>digit
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="890">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(c<sp/>&lt;<sp/>&apos;0&apos;<sp/>||<sp/>c<sp/>&gt;
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;9&apos;</highlight>
                <highlight class="normal">)</highlight>
            </codeline>
            <codeline lineno="891">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>isNumber<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="892">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="893">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>*name++<sp/>=<sp/>c;
                </highlight>
            </codeline>
            <codeline lineno="894">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="895">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>token-&gt;
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length
                    </ref>
                    <sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                </highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(name<sp/>-<sp/>token-&gt;<ref
                        refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                    name</ref>);
                </highlight>
            </codeline>
            <codeline lineno="896">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(token-&gt;
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length
                    </ref>
                    <sp/>==<sp/>0)
                </highlight>
            </codeline>
            <codeline lineno="897">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>isNumber<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="898">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>*name++<sp/>=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;\0&apos;</highlight>
                <highlight class="normal">;
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Null<sp/>terminator
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="899">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="900">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Second<sp/>check<sp/>for<sp/>index:<sp/>more<sp/>than<sp/>one<sp/>
                    digit<sp/>cannot<sp/>have<sp/>leading<sp/>zero
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="901">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(isNumber<sp/>&amp;&amp;<sp/>token-&gt;
                    <ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                        length
                    </ref>
                    <sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>token-&gt;<ref
                            refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c"
                            kindref="member">name</ref>[0]<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;0&apos;</highlight>
                <highlight class="normal">)</highlight>
            </codeline>
            <codeline lineno="902">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>isNumber<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="903">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="904">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>String<sp/>to<sp/>SizeType<sp/>conversion
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="905">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                    <sp/>n<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="906">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(isNumber)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="907">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>token-&gt;<ref
                        refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">
                    length</ref>;<sp/>j++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="908">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                    <sp/>m<sp/>=<sp/>n<sp/>*<sp/>10<sp/>+
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">
                    <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>
                </highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(token-&gt;<ref
                        refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">
                    name</ref>[j]<sp/>-
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;0&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="909">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(m<sp/>&lt;<sp/>n)<sp/>{
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>overflow<sp/>detection
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="910">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>isNumber<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="911">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">break</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="912">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="913">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>n<sp/>=<sp/>m;
                </highlight>
            </codeline>
            <codeline lineno="914">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="915">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="916">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="917">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>token-&gt;
                    <ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">
                        index
                    </ref>
                    <sp/>=<sp/>isNumber<sp/>?<sp/>n<sp/>:<sp/>kPointerInvalidIndex;
                </highlight>
            </codeline>
            <codeline lineno="918">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>token++;
                </highlight>
            </codeline>
            <codeline lineno="919">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="920">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="921">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(name<sp/>&lt;=<sp/>nameBuffer_<sp/>+<sp/>length);
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Should<sp/>not<sp/>overflow<sp/>buffer
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="922">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>parseErrorCode_<sp/>=
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0"
                         kindref="member">kPointerParseErrorNone</ref>;
                </highlight>
            </codeline>
            <codeline lineno="923">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="924">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="925">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>error:
                </highlight>
            </codeline>
            <codeline lineno="926">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Allocator::Free(tokens_);
                </highlight>
            </codeline>
            <codeline lineno="927">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>nameBuffer_<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="928">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>tokens_<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="929">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>tokenCount_<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="930">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>parseErrorOffset_<sp/>=<sp/>i;
                </highlight>
            </codeline>
            <codeline lineno="931">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="932">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="933">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="935"></codeline>
            <codeline lineno="940">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal">&lt;</highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>uriFragment,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>OutputStream&gt;
                </highlight>
            </codeline>
            <codeline lineno="941">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>Stringify(OutputStream&amp;<sp/>os)
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="942">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"
                         kindref="member">RAPIDJSON_ASSERT</ref>(IsValid());
                </highlight>
            </codeline>
            <codeline lineno="943">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="944">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(uriFragment)
                </highlight>
            </codeline>
            <codeline lineno="945">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os.Put(
                </highlight>
                <highlight class="charliteral">&apos;#&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="946">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="947">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>
                    <sp/>*t<sp/>=<sp/>tokens_;<sp/>t<sp/>!=<sp/>tokens_<sp/>+<sp/>tokenCount_;<sp/>++t)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="948">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os.Put(
                </highlight>
                <highlight class="charliteral">&apos;/&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="949">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>t-&gt;length;<sp/>j++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="950">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch<sp/>c<sp/>=<sp/>t-&gt;name[j];
                </highlight>
            </codeline>
            <codeline lineno="951">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(c<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;~&apos;</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="952">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os.Put(
                </highlight>
                <highlight class="charliteral">&apos;~&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="953">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os.Put(
                </highlight>
                <highlight class="charliteral">&apos;0&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="954">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="955">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(c<sp/>==
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;/&apos;</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="956">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os.Put(
                </highlight>
                <highlight class="charliteral">&apos;~&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="957">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os.Put(
                </highlight>
                <highlight class="charliteral">&apos;1&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="958">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="959">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(uriFragment<sp/>&amp;&amp;<sp/>NeedPercentEncode(c))<sp/>{
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="960">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Transcode<sp/>to<sp/>UTF8<sp/>sequence
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="961">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="struct_generic_string_stream" kindref="compound">GenericStringStream&lt;typename
                        ValueType::EncodingType&gt;</ref>
                    <sp/>source(&amp;t-&gt;name[j]);
                </highlight>
            </codeline>
            <codeline lineno="962">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>PercentEncodeStream&lt;OutputStream&gt;<sp/>target(os);
                </highlight>
            </codeline>
            <codeline lineno="963">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!<ref refid="struct_transcoder" kindref="compound">Transcoder</ref>&lt;EncodingType,
                    <sp/>
                    <ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>
                    <sp/>&gt;().Validate(source,<sp/>target))
                </highlight>
            </codeline>
            <codeline lineno="964">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="965">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>j<sp/>+=<sp/>source.Tell()<sp/>-<sp/>1;
                </highlight>
            </codeline>
            <codeline lineno="966">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="967">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="968">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os.Put(c);
                </highlight>
            </codeline>
            <codeline lineno="969">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="970">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="971">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="972">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="973">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="975"></codeline>
            <codeline lineno="980">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">class
                    <sp/>
                </highlight>
                <highlight class="normal">PercentDecodeStream<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="981">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">public</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="982">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>ValueType::Ch
                    <sp/>
                    <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>;
                </highlight>
            </codeline>
            <codeline lineno="983">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="985"></codeline>
            <codeline lineno="989">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>PercentDecodeStream(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>source,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>end)<sp/>:<sp/>src_(source),<sp/>head_(source),<sp/>end_(end),
                    <sp/>valid_(
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">)<sp/>{}
                </highlight>
            </codeline>
            <codeline lineno="990">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="991">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch<sp/>Take()<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="992">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(*src_<sp/>!=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;%&apos;</highlight>
                <highlight class="normal"><sp/>||<sp/>src_<sp/>+<sp/>3<sp/>&gt;<sp/>end_)<sp/>{
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>%XY<sp/>triplet
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="993">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>valid_<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="994">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="995">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="996">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>src_++;
                </highlight>
            </codeline>
            <codeline lineno="997">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch<sp/>c<sp/>=<sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="998">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>2;<sp/>j++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="999">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>c<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">Ch</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(c<sp/>&lt;&lt;<sp/>4);
                </highlight>
            </codeline>
            <codeline lineno="1000">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch<sp/>h<sp/>=<sp/>*src_;
                </highlight>
            </codeline>
            <codeline lineno="1001">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>(h<sp/>&gt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;0&apos;</highlight>
                <highlight class="normal"><sp/>&amp;&amp;<sp/>h<sp/>&lt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;9&apos;</highlight>
                <highlight class="normal">)<sp/>c<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">Ch</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(c<sp/>+<sp/>h<sp/>-
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;0&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="1002">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(h<sp/>&gt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;A&apos;</highlight>
                <highlight class="normal"><sp/>&amp;&amp;<sp/>h<sp/>&lt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;F&apos;</highlight>
                <highlight class="normal">)<sp/>c<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">Ch</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(c<sp/>+<sp/>h<sp/>-
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;A&apos;</highlight>
                <highlight class="normal"><sp/>+<sp/>10);
                </highlight>
            </codeline>
            <codeline lineno="1003">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(h<sp/>&gt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;a&apos;</highlight>
                <highlight class="normal"><sp/>&amp;&amp;<sp/>h<sp/>&lt;=
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;f&apos;</highlight>
                <highlight class="normal">)<sp/>c<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="normal">Ch</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(c<sp/>+<sp/>h<sp/>-
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;a&apos;</highlight>
                <highlight class="normal"><sp/>+<sp/>10);
                </highlight>
            </codeline>
            <codeline lineno="1004">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1005">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>valid_<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="1006">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>0;
                </highlight>
            </codeline>
            <codeline lineno="1007">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="1008">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>src_++;
                </highlight>
            </codeline>
            <codeline lineno="1009">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="1010">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>c;
                </highlight>
            </codeline>
            <codeline lineno="1011">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="1012">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1013">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>Tell()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(src_<sp/>-<sp/>head_);<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="1014">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>IsValid()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>valid_;<sp/>}
                </highlight>
            </codeline>
            <codeline lineno="1015">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1016">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">private</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="1017">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>src_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1018">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>head_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1019">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>Ch*<sp/>end_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1020">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>valid_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1021">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>};
                </highlight>
            </codeline>
            <codeline lineno="1022">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1024">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>OutputStream&gt;
                </highlight>
            </codeline>
            <codeline lineno="1025">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">class
                    <sp/>
                </highlight>
                <highlight class="normal">PercentEncodeStream<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1026">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">public</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="1027">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>PercentEncodeStream(OutputStream&amp;<sp/>os)<sp/>:<sp/>os_(os)<sp/>{}
                </highlight>
            </codeline>
            <codeline lineno="1028">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Put(
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>c)<sp/>{
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>UTF-8<sp/>must<sp/>be<sp/>byte
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1029">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">unsigned</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>u<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">static_cast&lt;</highlight>
                <highlight class="keywordtype">unsigned</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="keyword">&gt;</highlight>
                <highlight class="normal">(c);</highlight>
            </codeline>
            <codeline lineno="1030">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">static</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">char</highlight>
                <highlight class="normal"><sp/>hexDigits[16]<sp/>=<sp/>{
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;0&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;1&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;2&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;3&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;4&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;5&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;6&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;7&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;8&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;9&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;A&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;B&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;C&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;D&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;E&apos;</highlight>
                <highlight class="normal">,
                    <sp/>
                </highlight>
                <highlight class="charliteral">&apos;F&apos;</highlight>
                <highlight class="normal"><sp/>};
                </highlight>
            </codeline>
            <codeline lineno="1031">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os_.Put(
                </highlight>
                <highlight class="charliteral">&apos;%&apos;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="1032">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os_.Put(hexDigits[u<sp/>&gt;&gt;<sp/>4]);
                </highlight>
            </codeline>
            <codeline lineno="1033">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>os_.Put(hexDigits[u<sp/>&amp;<sp/>15]);
                </highlight>
            </codeline>
            <codeline lineno="1034">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="1035">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">private</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="1036">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>OutputStream&amp;<sp/>os_;
                </highlight>
            </codeline>
            <codeline lineno="1037">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>};
                </highlight>
            </codeline>
            <codeline lineno="1038">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1039">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Allocator*<sp/>allocator_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1040">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Allocator*<sp/>ownAllocator_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1041">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>Ch*<sp/>nameBuffer_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1042">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>*<sp/>tokens_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1043">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>tokenCount_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1044">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>parseErrorOffset_;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1045">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be"
                         kindref="member">PointerParseErrorCode
                    </ref>
                    <sp/>parseErrorCode_;
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="1046">
                <highlight class="normal">};</highlight>
            </codeline>
            <codeline lineno="1047">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1049">
                <highlight class="keyword">typedef</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;Value&gt;</ref>
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">Pointer</ref>;
                </highlight>
            </codeline>
            <codeline lineno="1050">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1052"></codeline>
            <codeline lineno="1053"></codeline>
            <codeline lineno="1055">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1056">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1057">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>CreateValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1058">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.Create(root,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1059">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1060">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1061">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1062">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>CreateValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1063">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).Create(root,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1064">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1065">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1066">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>No<sp/>allocator<sp/>parameter
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1067">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1068">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType&gt;
                </highlight>
            </codeline>
            <codeline lineno="1069">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>CreateValueByPointer(DocumentType&amp;
                    <sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1070">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.Create(document);
                </highlight>
            </codeline>
            <codeline lineno="1071">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1072">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1073">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1074">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>CreateValueByPointer(DocumentType&amp;
                    <sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N])<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1075">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).Create(document);
                </highlight>
            </codeline>
            <codeline lineno="1076">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1077">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1079">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1080">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1081">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType*<sp/>GetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1082">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.Get(root,<sp/>unresolvedTokenIndex);
                </highlight>
            </codeline>
            <codeline lineno="1083">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1084">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1085">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1086">
                <highlight class="normal"></highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType*<sp/>GetValueByPointer(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1087">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.Get(root,<sp/>unresolvedTokenIndex);
                </highlight>
            </codeline>
            <codeline lineno="1088">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1089">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1090">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1091">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType*<sp/>GetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType<sp/>(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1092">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).Get(root,<sp/>unresolvedTokenIndex);
                </highlight>
            </codeline>
            <codeline lineno="1093">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1094">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1095">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1096">
                <highlight class="normal"></highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType*<sp/>GetValueByPointer(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1097">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).Get(root,<sp/>unresolvedTokenIndex);
                </highlight>
            </codeline>
            <codeline lineno="1098">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1099">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1101">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1102">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1103">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>GetValueByPointerWithDefault(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1104">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.GetWithDefault(root,<sp/>defaultValue,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1105">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1106">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1107">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1108">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>GetValueByPointerWithDefault(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::Ch*<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1109">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.GetWithDefault(root,<sp/>defaultValue,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1110">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1111">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1112">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1113">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1114">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>GetValueByPointerWithDefault(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>T::Ch&gt;&amp;<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1115">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.GetWithDefault(root,<sp/>defaultValue,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1116">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1117">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1118">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1119">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T2&gt;
                </highlight>
            </codeline>
            <codeline lineno="1120">
                <highlight class="normal"><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f"
                                               kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref>
                    <sp/>&gt;),<sp/>(
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="1121">
                <highlight class="normal">GetValueByPointerWithDefault(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,<sp/>T2<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1122">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.GetWithDefault(root,<sp/>defaultValue,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1123">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1124">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1125">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1126">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>GetValueByPointerWithDefault(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1127">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).GetWithDefault(root,<sp/>defaultValue,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1128">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1129">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1130">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1131">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>GetValueByPointerWithDefault(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::Ch*<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1132">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).GetWithDefault(root,<sp/>defaultValue,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1133">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1134">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1135">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1136">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1137">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>GetValueByPointerWithDefault(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>T::Ch&gt;&amp;<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1138">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).GetWithDefault(root,<sp/>defaultValue,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1139">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1140">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1141">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1142">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T2&gt;
                </highlight>
            </codeline>
            <codeline lineno="1143">
                <highlight class="normal"><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f"
                                               kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref>
                    <sp/>&gt;),<sp/>(
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="1144">
                <highlight class="normal">GetValueByPointerWithDefault(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],<sp/>T2<sp/>defaultValue,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1145">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).GetWithDefault(root,<sp/>defaultValue,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1146">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1147">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1148">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>No<sp/>allocator<sp/>parameter
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1149">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1150">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType&gt;
                </highlight>
            </codeline>
            <codeline lineno="1151">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>
                    GetValueByPointerWithDefault(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>defaultValue)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1152">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.GetWithDefault(document,<sp/>defaultValue);
                </highlight>
            </codeline>
            <codeline lineno="1153">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1154">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1155">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType&gt;
                </highlight>
            </codeline>
            <codeline lineno="1156">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>
                    GetValueByPointerWithDefault(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::Ch*<sp/>defaultValue)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1157">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.GetWithDefault(document,<sp/>defaultValue);
                </highlight>
            </codeline>
            <codeline lineno="1158">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1159">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1160">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1161">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType&gt;
                </highlight>
            </codeline>
            <codeline lineno="1162">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>
                    GetValueByPointerWithDefault(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>DocumentType::Ch&gt;&amp;<sp/>
                    defaultValue)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1163">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.GetWithDefault(document,<sp/>defaultValue);
                </highlight>
            </codeline>
            <codeline lineno="1164">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1165">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1166">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1167">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T2&gt;
                </highlight>
            </codeline>
            <codeline lineno="1168">
                <highlight class="normal"><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f"
                                               kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref>
                    <sp/>&gt;),<sp/>(
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="1169">
                <highlight class="normal">GetValueByPointerWithDefault(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,<sp/>T2<sp/>defaultValue)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1170">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.GetWithDefault(document,<sp/>defaultValue);
                </highlight>
            </codeline>
            <codeline lineno="1171">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1172">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1173">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1174">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>
                    GetValueByPointerWithDefault(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>defaultValue)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1175">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).GetWithDefault(document,<sp/>
                    defaultValue);
                </highlight>
            </codeline>
            <codeline lineno="1176">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1177">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1178">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1179">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>
                    GetValueByPointerWithDefault(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::Ch*<sp/>defaultValue)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1180">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).GetWithDefault(document,<sp/>
                    defaultValue);
                </highlight>
            </codeline>
            <codeline lineno="1181">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1182">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1183">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1184">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1185">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>
                    GetValueByPointerWithDefault(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>DocumentType::Ch&gt;&amp;<sp/>
                    defaultValue)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1186">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).GetWithDefault(document,<sp/>
                    defaultValue);
                </highlight>
            </codeline>
            <codeline lineno="1187">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1188">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1189">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1190">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T2&gt;
                </highlight>
            </codeline>
            <codeline lineno="1191">
                <highlight class="normal"><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f"
                                               kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref>
                    <sp/>&gt;),<sp/>(
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="1192">
                <highlight class="normal">GetValueByPointerWithDefault(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],<sp/>T2<sp/>defaultValue)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1193">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).GetWithDefault(document,<sp/>
                    defaultValue);
                </highlight>
            </codeline>
            <codeline lineno="1194">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1195">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1197">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1198">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1199">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1200">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1201">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1202">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1203">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1204">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1205">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1206">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1207">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1208">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1209">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::Ch*<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1210">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1211">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1212">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1213">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1214">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1215">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>T::Ch&gt;&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1216">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1217">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1218">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1219">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1220">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T2&gt;
                </highlight>
            </codeline>
            <codeline lineno="1221">
                <highlight class="normal"><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f"
                                               kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref>
                    <sp/>&gt;),<sp/>(
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="1222">
                <highlight class="normal">SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,<sp/>T2<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1223">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1224">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1225">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1226">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1227">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1228">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1229">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1230">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1231">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1232">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1233">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1234">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1235">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1236">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1237">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::Ch*<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1238">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1239">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1240">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1241">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1242">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1243">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>T::Ch&gt;&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1244">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1245">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1246">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1247">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1248">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T2&gt;
                </highlight>
            </codeline>
            <codeline lineno="1249">
                <highlight class="normal"><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f"
                                               kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref>
                    <sp/>&gt;),<sp/>(
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="1250">
                <highlight class="normal">SetValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],<sp/>T2<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1251">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1252">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1253">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1254">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>No<sp/>allocator<sp/>parameter
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1255">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1256">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType&gt;
                </highlight>
            </codeline>
            <codeline lineno="1257">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SetValueByPointer(DocumentType&amp;<sp/>
                    document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1258">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1259">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1260">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1261">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType&gt;
                </highlight>
            </codeline>
            <codeline lineno="1262">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SetValueByPointer(DocumentType&amp;<sp/>
                    document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1263">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1264">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1265">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1266">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType&gt;
                </highlight>
            </codeline>
            <codeline lineno="1267">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SetValueByPointer(DocumentType&amp;<sp/>
                    document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::Ch*<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1268">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1269">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1270">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1271">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1272">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType&gt;
                </highlight>
            </codeline>
            <codeline lineno="1273">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SetValueByPointer(DocumentType&amp;<sp/>
                    document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>DocumentType::Ch&gt;&amp;<sp/>value)
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1274">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1275">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1276">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1277">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1278">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T2&gt;
                </highlight>
            </codeline>
            <codeline lineno="1279">
                <highlight class="normal"><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f"
                                               kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref>
                    <sp/>&gt;),<sp/>(
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="1280">
                <highlight class="normal">SetValueByPointer(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,<sp/>T2<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1281">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1282">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1283">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1284">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1285">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SetValueByPointer(DocumentType&amp;<sp/>
                    document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1286">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1287">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1288">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1289">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1290">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SetValueByPointer(DocumentType&amp;<sp/>
                    document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1291">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1292">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1293">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1294">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1295">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SetValueByPointer(DocumentType&amp;<sp/>
                    document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::Ch*<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1296">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1297">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1298">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1299">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1300">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1301">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SetValueByPointer(DocumentType&amp;<sp/>
                    document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>DocumentType::Ch&gt;&amp;<sp/>value)
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1302">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1303">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1304">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1305">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1306">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T2&gt;
                </highlight>
            </codeline>
            <codeline lineno="1307">
                <highlight class="normal"><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f"
                                               kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,
                    <sp/>
                    <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref>
                    <sp/>&gt;),<sp/>(
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;))
                </highlight>
            </codeline>
            <codeline lineno="1308">
                <highlight class="normal">SetValueByPointer(DocumentType&amp;<sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],<sp/>T2<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1309">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a71476d125a276b62a246990da1bd3468" kindref="member">Set</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1310">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1311">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1313">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1314">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1315">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SwapValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1316">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a3b40ad3e851640e295a4623b624af395" kindref="member">Swap</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1317">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1318">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1319">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1320">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>SwapValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::ValueType&amp;<sp/>value,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T::AllocatorType&amp;<sp/>a)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1321">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a3b40ad3e851640e295a4623b624af395" kindref="member">Swap</ref>(root,
                    <sp/>value,<sp/>a);
                </highlight>
            </codeline>
            <codeline lineno="1322">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1323">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1324">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType&gt;
                </highlight>
            </codeline>
            <codeline lineno="1325">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SwapValueByPointer(DocumentType&amp;
                    <sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>&amp;<sp/>pointer,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1326">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a3b40ad3e851640e295a4623b624af395" kindref="member">Swap</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1327">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1328">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1329">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1330">
                <highlight class="normal"></highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>SwapValueByPointer(DocumentType&amp;
                    <sp/>document,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N],
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>DocumentType::ValueType&amp;<sp/>value)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1331">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        DocumentType::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a3b40ad3e851640e295a4623b624af395" kindref="member">Swap</ref>(document,
                    <sp/>value);
                </highlight>
            </codeline>
            <codeline lineno="1332">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1333">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1335">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1336">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T&gt;
                </highlight>
            </codeline>
            <codeline lineno="1337">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>EraseValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>&amp;<sp/>pointer)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1338">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>pointer.<ref
                        refid="class_generic_pointer_1a759c07e81c9738e7a2a68b36d5c28643" kindref="member">Erase</ref>(root);
                </highlight>
            </codeline>
            <codeline lineno="1339">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1340">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1341">
                <highlight class="normal"></highlight>
                <highlight class="keyword">template</highlight>
                <highlight class="normal"><sp/>&lt;
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>T,
                    <sp/>
                </highlight>
                <highlight class="keyword">typename</highlight>
                <highlight class="normal"><sp/>CharType,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>N&gt;
                </highlight>
            </codeline>
            <codeline lineno="1342">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>EraseValueByPointer(T&amp;<sp/>root,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>CharType(&amp;source)[N])<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="1343">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename
                        T::ValueType&gt;</ref>(source,<sp/>N<sp/>-<sp/>1).<ref
                        refid="class_generic_pointer_1a759c07e81c9738e7a2a68b36d5c28643" kindref="member">Erase</ref>(root);
                </highlight>
            </codeline>
            <codeline lineno="1344">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="1345">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1347">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1348">
                <highlight class="normal">
                    <ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1"
                         kindref="member">RAPIDJSON_NAMESPACE_END
                    </ref>
                </highlight>
            </codeline>
            <codeline lineno="1349">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1350">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>__clang__
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1351">
                <highlight class="normal">RAPIDJSON_DIAG_POP</highlight>
            </codeline>
            <codeline lineno="1352">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1353">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1354">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#ifdef<sp/>_MSC_VER
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1355">
                <highlight class="normal">RAPIDJSON_DIAG_POP</highlight>
            </codeline>
            <codeline lineno="1356">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1357">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="1358">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#endif<sp/>//<sp/>RAPIDJSON_POINTER_H_
                </highlight>
            </codeline>
        </programlisting>
        <location file="rapidjson/pointer.h"/>
    </compounddef>
</doxygen>
